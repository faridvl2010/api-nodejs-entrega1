
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model autentication
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 */
export type autentication = {
  ID_AUTH: number
  ID_USUARIO: number
  CREDENTIAL: string
  HASH: string
  STATE: string
}

/**
 * Model historic_usuario
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 */
export type historic_usuario = {
  ID_HISTORIC_USSERS: number
  ID_USUARIOS: number
  PREV_DATA: string
  CURRENT_DATA: string
  DATE: Date
  IP: string
}

/**
 * Model rol
 * 
 */
export type rol = {
  ID_ROL: number
  NAME: string
  DESCRIPTION: string
  STATE: string
  CREATION_DATE: Date
}

/**
 * Model ussers_rol
 * 
 */
export type ussers_rol = {
  ID_USSERS_ROL: number
  CREATION_DATE: Date
  STATE: string
  ID_USUARIOS: number
  ID_ROL: number
}

/**
 * Model log_connection
 * 
 */
export type log_connection = {
  ID_USSERS_ROL: number
  INITIAL_DATE: Date
  FINAL_DATE: Date
  STATE: string
  ID_USUARIOS: number
}

/**
 * Model usuarios
 * 
 */
export type usuarios = {
  ID_USUARIOS: number
  NAME: string
  LAST_NAME: string
  EMAIL: string
  TYPE_DOCUMENT: string
  DOCUMENT: string
  STATE: string
  CREATION_DATE: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Autentications
 * const autentications = await prisma.autentication.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Autentications
   * const autentications = await prisma.autentication.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.autentication`: Exposes CRUD operations for the **autentication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Autentications
    * const autentications = await prisma.autentication.findMany()
    * ```
    */
  get autentication(): Prisma.autenticationDelegate<GlobalReject>;

  /**
   * `prisma.historic_usuario`: Exposes CRUD operations for the **historic_usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historic_usuarios
    * const historic_usuarios = await prisma.historic_usuario.findMany()
    * ```
    */
  get historic_usuario(): Prisma.historic_usuarioDelegate<GlobalReject>;

  /**
   * `prisma.rol`: Exposes CRUD operations for the **rol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rols
    * const rols = await prisma.rol.findMany()
    * ```
    */
  get rol(): Prisma.rolDelegate<GlobalReject>;

  /**
   * `prisma.ussers_rol`: Exposes CRUD operations for the **ussers_rol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ussers_rols
    * const ussers_rols = await prisma.ussers_rol.findMany()
    * ```
    */
  get ussers_rol(): Prisma.ussers_rolDelegate<GlobalReject>;

  /**
   * `prisma.log_connection`: Exposes CRUD operations for the **log_connection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Log_connections
    * const log_connections = await prisma.log_connection.findMany()
    * ```
    */
  get log_connection(): Prisma.log_connectionDelegate<GlobalReject>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    autentication: 'autentication',
    historic_usuario: 'historic_usuario',
    rol: 'rol',
    ussers_rol: 'ussers_rol',
    log_connection: 'log_connection',
    usuarios: 'usuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RolCountOutputType
   */


  export type RolCountOutputType = {
    ussers_rol: number
  }

  export type RolCountOutputTypeSelect = {
    ussers_rol?: boolean
  }

  export type RolCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RolCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RolCountOutputType
    : S extends undefined
    ? never
    : S extends RolCountOutputTypeArgs
    ?'include' extends U
    ? RolCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RolCountOutputType ? RolCountOutputType[P] : never
  } 
    : RolCountOutputType
  : RolCountOutputType




  // Custom InputTypes

  /**
   * RolCountOutputType without action
   */
  export type RolCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RolCountOutputType
     * 
    **/
    select?: RolCountOutputTypeSelect | null
  }



  /**
   * Count Type UsuariosCountOutputType
   */


  export type UsuariosCountOutputType = {
    autentication: number
    historic_usuario: number
    ussers_rol: number
    log_connection: number
  }

  export type UsuariosCountOutputTypeSelect = {
    autentication?: boolean
    historic_usuario?: boolean
    ussers_rol?: boolean
    log_connection?: boolean
  }

  export type UsuariosCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsuariosCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsuariosCountOutputType
    : S extends undefined
    ? never
    : S extends UsuariosCountOutputTypeArgs
    ?'include' extends U
    ? UsuariosCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsuariosCountOutputType ? UsuariosCountOutputType[P] : never
  } 
    : UsuariosCountOutputType
  : UsuariosCountOutputType




  // Custom InputTypes

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     * 
    **/
    select?: UsuariosCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model autentication
   */


  export type AggregateAutentication = {
    _count: AutenticationCountAggregateOutputType | null
    _avg: AutenticationAvgAggregateOutputType | null
    _sum: AutenticationSumAggregateOutputType | null
    _min: AutenticationMinAggregateOutputType | null
    _max: AutenticationMaxAggregateOutputType | null
  }

  export type AutenticationAvgAggregateOutputType = {
    ID_AUTH: number | null
    ID_USUARIO: number | null
  }

  export type AutenticationSumAggregateOutputType = {
    ID_AUTH: number | null
    ID_USUARIO: number | null
  }

  export type AutenticationMinAggregateOutputType = {
    ID_AUTH: number | null
    ID_USUARIO: number | null
    CREDENTIAL: string | null
    HASH: string | null
    STATE: string | null
  }

  export type AutenticationMaxAggregateOutputType = {
    ID_AUTH: number | null
    ID_USUARIO: number | null
    CREDENTIAL: string | null
    HASH: string | null
    STATE: string | null
  }

  export type AutenticationCountAggregateOutputType = {
    ID_AUTH: number
    ID_USUARIO: number
    CREDENTIAL: number
    HASH: number
    STATE: number
    _all: number
  }


  export type AutenticationAvgAggregateInputType = {
    ID_AUTH?: true
    ID_USUARIO?: true
  }

  export type AutenticationSumAggregateInputType = {
    ID_AUTH?: true
    ID_USUARIO?: true
  }

  export type AutenticationMinAggregateInputType = {
    ID_AUTH?: true
    ID_USUARIO?: true
    CREDENTIAL?: true
    HASH?: true
    STATE?: true
  }

  export type AutenticationMaxAggregateInputType = {
    ID_AUTH?: true
    ID_USUARIO?: true
    CREDENTIAL?: true
    HASH?: true
    STATE?: true
  }

  export type AutenticationCountAggregateInputType = {
    ID_AUTH?: true
    ID_USUARIO?: true
    CREDENTIAL?: true
    HASH?: true
    STATE?: true
    _all?: true
  }

  export type AutenticationAggregateArgs = {
    /**
     * Filter which autentication to aggregate.
     * 
    **/
    where?: autenticationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of autentications to fetch.
     * 
    **/
    orderBy?: Enumerable<autenticationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: autenticationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` autentications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` autentications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned autentications
    **/
    _count?: true | AutenticationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AutenticationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AutenticationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AutenticationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AutenticationMaxAggregateInputType
  }

  export type GetAutenticationAggregateType<T extends AutenticationAggregateArgs> = {
        [P in keyof T & keyof AggregateAutentication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAutentication[P]>
      : GetScalarType<T[P], AggregateAutentication[P]>
  }




  export type AutenticationGroupByArgs = {
    where?: autenticationWhereInput
    orderBy?: Enumerable<autenticationOrderByWithAggregationInput>
    by: Array<AutenticationScalarFieldEnum>
    having?: autenticationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AutenticationCountAggregateInputType | true
    _avg?: AutenticationAvgAggregateInputType
    _sum?: AutenticationSumAggregateInputType
    _min?: AutenticationMinAggregateInputType
    _max?: AutenticationMaxAggregateInputType
  }


  export type AutenticationGroupByOutputType = {
    ID_AUTH: number
    ID_USUARIO: number
    CREDENTIAL: string
    HASH: string
    STATE: string
    _count: AutenticationCountAggregateOutputType | null
    _avg: AutenticationAvgAggregateOutputType | null
    _sum: AutenticationSumAggregateOutputType | null
    _min: AutenticationMinAggregateOutputType | null
    _max: AutenticationMaxAggregateOutputType | null
  }

  type GetAutenticationGroupByPayload<T extends AutenticationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AutenticationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AutenticationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AutenticationGroupByOutputType[P]>
            : GetScalarType<T[P], AutenticationGroupByOutputType[P]>
        }
      >
    >


  export type autenticationSelect = {
    ID_AUTH?: boolean
    ID_USUARIO?: boolean
    CREDENTIAL?: boolean
    HASH?: boolean
    STATE?: boolean
    usuarios?: boolean | usuariosArgs
  }

  export type autenticationInclude = {
    usuarios?: boolean | usuariosArgs
  }

  export type autenticationGetPayload<
    S extends boolean | null | undefined | autenticationArgs,
    U = keyof S
      > = S extends true
        ? autentication
    : S extends undefined
    ? never
    : S extends autenticationArgs | autenticationFindManyArgs
    ?'include' extends U
    ? autentication  & {
    [P in TrueKeys<S['include']>]:
        P extends 'usuarios' ? usuariosGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'usuarios' ? usuariosGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof autentication ? autentication[P] : never
  } 
    : autentication
  : autentication


  type autenticationCountArgs = Merge<
    Omit<autenticationFindManyArgs, 'select' | 'include'> & {
      select?: AutenticationCountAggregateInputType | true
    }
  >

  export interface autenticationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Autentication that matches the filter.
     * @param {autenticationFindUniqueArgs} args - Arguments to find a Autentication
     * @example
     * // Get one Autentication
     * const autentication = await prisma.autentication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends autenticationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, autenticationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'autentication'> extends True ? CheckSelect<T, Prisma__autenticationClient<autentication>, Prisma__autenticationClient<autenticationGetPayload<T>>> : CheckSelect<T, Prisma__autenticationClient<autentication | null, null>, Prisma__autenticationClient<autenticationGetPayload<T> | null, null>>

    /**
     * Find the first Autentication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {autenticationFindFirstArgs} args - Arguments to find a Autentication
     * @example
     * // Get one Autentication
     * const autentication = await prisma.autentication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends autenticationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, autenticationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'autentication'> extends True ? CheckSelect<T, Prisma__autenticationClient<autentication>, Prisma__autenticationClient<autenticationGetPayload<T>>> : CheckSelect<T, Prisma__autenticationClient<autentication | null, null>, Prisma__autenticationClient<autenticationGetPayload<T> | null, null>>

    /**
     * Find zero or more Autentications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {autenticationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Autentications
     * const autentications = await prisma.autentication.findMany()
     * 
     * // Get first 10 Autentications
     * const autentications = await prisma.autentication.findMany({ take: 10 })
     * 
     * // Only select the `ID_AUTH`
     * const autenticationWithID_AUTHOnly = await prisma.autentication.findMany({ select: { ID_AUTH: true } })
     * 
    **/
    findMany<T extends autenticationFindManyArgs>(
      args?: SelectSubset<T, autenticationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<autentication>>, PrismaPromise<Array<autenticationGetPayload<T>>>>

    /**
     * Create a Autentication.
     * @param {autenticationCreateArgs} args - Arguments to create a Autentication.
     * @example
     * // Create one Autentication
     * const Autentication = await prisma.autentication.create({
     *   data: {
     *     // ... data to create a Autentication
     *   }
     * })
     * 
    **/
    create<T extends autenticationCreateArgs>(
      args: SelectSubset<T, autenticationCreateArgs>
    ): CheckSelect<T, Prisma__autenticationClient<autentication>, Prisma__autenticationClient<autenticationGetPayload<T>>>

    /**
     * Create many Autentications.
     *     @param {autenticationCreateManyArgs} args - Arguments to create many Autentications.
     *     @example
     *     // Create many Autentications
     *     const autentication = await prisma.autentication.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends autenticationCreateManyArgs>(
      args?: SelectSubset<T, autenticationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Autentication.
     * @param {autenticationDeleteArgs} args - Arguments to delete one Autentication.
     * @example
     * // Delete one Autentication
     * const Autentication = await prisma.autentication.delete({
     *   where: {
     *     // ... filter to delete one Autentication
     *   }
     * })
     * 
    **/
    delete<T extends autenticationDeleteArgs>(
      args: SelectSubset<T, autenticationDeleteArgs>
    ): CheckSelect<T, Prisma__autenticationClient<autentication>, Prisma__autenticationClient<autenticationGetPayload<T>>>

    /**
     * Update one Autentication.
     * @param {autenticationUpdateArgs} args - Arguments to update one Autentication.
     * @example
     * // Update one Autentication
     * const autentication = await prisma.autentication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends autenticationUpdateArgs>(
      args: SelectSubset<T, autenticationUpdateArgs>
    ): CheckSelect<T, Prisma__autenticationClient<autentication>, Prisma__autenticationClient<autenticationGetPayload<T>>>

    /**
     * Delete zero or more Autentications.
     * @param {autenticationDeleteManyArgs} args - Arguments to filter Autentications to delete.
     * @example
     * // Delete a few Autentications
     * const { count } = await prisma.autentication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends autenticationDeleteManyArgs>(
      args?: SelectSubset<T, autenticationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Autentications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {autenticationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Autentications
     * const autentication = await prisma.autentication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends autenticationUpdateManyArgs>(
      args: SelectSubset<T, autenticationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Autentication.
     * @param {autenticationUpsertArgs} args - Arguments to update or create a Autentication.
     * @example
     * // Update or create a Autentication
     * const autentication = await prisma.autentication.upsert({
     *   create: {
     *     // ... data to create a Autentication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Autentication we want to update
     *   }
     * })
    **/
    upsert<T extends autenticationUpsertArgs>(
      args: SelectSubset<T, autenticationUpsertArgs>
    ): CheckSelect<T, Prisma__autenticationClient<autentication>, Prisma__autenticationClient<autenticationGetPayload<T>>>

    /**
     * Find one Autentication that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {autenticationFindUniqueOrThrowArgs} args - Arguments to find a Autentication
     * @example
     * // Get one Autentication
     * const autentication = await prisma.autentication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends autenticationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, autenticationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__autenticationClient<autentication>, Prisma__autenticationClient<autenticationGetPayload<T>>>

    /**
     * Find the first Autentication that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {autenticationFindFirstOrThrowArgs} args - Arguments to find a Autentication
     * @example
     * // Get one Autentication
     * const autentication = await prisma.autentication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends autenticationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, autenticationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__autenticationClient<autentication>, Prisma__autenticationClient<autenticationGetPayload<T>>>

    /**
     * Count the number of Autentications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {autenticationCountArgs} args - Arguments to filter Autentications to count.
     * @example
     * // Count the number of Autentications
     * const count = await prisma.autentication.count({
     *   where: {
     *     // ... the filter for the Autentications we want to count
     *   }
     * })
    **/
    count<T extends autenticationCountArgs>(
      args?: Subset<T, autenticationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AutenticationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Autentication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutenticationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AutenticationAggregateArgs>(args: Subset<T, AutenticationAggregateArgs>): PrismaPromise<GetAutenticationAggregateType<T>>

    /**
     * Group by Autentication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutenticationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AutenticationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AutenticationGroupByArgs['orderBy'] }
        : { orderBy?: AutenticationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AutenticationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAutenticationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for autentication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__autenticationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    usuarios<T extends usuariosArgs = {}>(args?: Subset<T, usuariosArgs>): CheckSelect<T, Prisma__usuariosClient<usuarios | Null>, Prisma__usuariosClient<usuariosGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * autentication base type for findUnique actions
   */
  export type autenticationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the autentication
     * 
    **/
    select?: autenticationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: autenticationInclude | null
    /**
     * Filter, which autentication to fetch.
     * 
    **/
    where: autenticationWhereUniqueInput
  }

  /**
   * autentication: findUnique
   */
  export interface autenticationFindUniqueArgs extends autenticationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * autentication base type for findFirst actions
   */
  export type autenticationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the autentication
     * 
    **/
    select?: autenticationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: autenticationInclude | null
    /**
     * Filter, which autentication to fetch.
     * 
    **/
    where?: autenticationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of autentications to fetch.
     * 
    **/
    orderBy?: Enumerable<autenticationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for autentications.
     * 
    **/
    cursor?: autenticationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` autentications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` autentications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of autentications.
     * 
    **/
    distinct?: Enumerable<AutenticationScalarFieldEnum>
  }

  /**
   * autentication: findFirst
   */
  export interface autenticationFindFirstArgs extends autenticationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * autentication findMany
   */
  export type autenticationFindManyArgs = {
    /**
     * Select specific fields to fetch from the autentication
     * 
    **/
    select?: autenticationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: autenticationInclude | null
    /**
     * Filter, which autentications to fetch.
     * 
    **/
    where?: autenticationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of autentications to fetch.
     * 
    **/
    orderBy?: Enumerable<autenticationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing autentications.
     * 
    **/
    cursor?: autenticationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` autentications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` autentications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AutenticationScalarFieldEnum>
  }


  /**
   * autentication create
   */
  export type autenticationCreateArgs = {
    /**
     * Select specific fields to fetch from the autentication
     * 
    **/
    select?: autenticationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: autenticationInclude | null
    /**
     * The data needed to create a autentication.
     * 
    **/
    data: XOR<autenticationCreateInput, autenticationUncheckedCreateInput>
  }


  /**
   * autentication createMany
   */
  export type autenticationCreateManyArgs = {
    /**
     * The data used to create many autentications.
     * 
    **/
    data: Enumerable<autenticationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * autentication update
   */
  export type autenticationUpdateArgs = {
    /**
     * Select specific fields to fetch from the autentication
     * 
    **/
    select?: autenticationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: autenticationInclude | null
    /**
     * The data needed to update a autentication.
     * 
    **/
    data: XOR<autenticationUpdateInput, autenticationUncheckedUpdateInput>
    /**
     * Choose, which autentication to update.
     * 
    **/
    where: autenticationWhereUniqueInput
  }


  /**
   * autentication updateMany
   */
  export type autenticationUpdateManyArgs = {
    /**
     * The data used to update autentications.
     * 
    **/
    data: XOR<autenticationUpdateManyMutationInput, autenticationUncheckedUpdateManyInput>
    /**
     * Filter which autentications to update
     * 
    **/
    where?: autenticationWhereInput
  }


  /**
   * autentication upsert
   */
  export type autenticationUpsertArgs = {
    /**
     * Select specific fields to fetch from the autentication
     * 
    **/
    select?: autenticationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: autenticationInclude | null
    /**
     * The filter to search for the autentication to update in case it exists.
     * 
    **/
    where: autenticationWhereUniqueInput
    /**
     * In case the autentication found by the `where` argument doesn't exist, create a new autentication with this data.
     * 
    **/
    create: XOR<autenticationCreateInput, autenticationUncheckedCreateInput>
    /**
     * In case the autentication was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<autenticationUpdateInput, autenticationUncheckedUpdateInput>
  }


  /**
   * autentication delete
   */
  export type autenticationDeleteArgs = {
    /**
     * Select specific fields to fetch from the autentication
     * 
    **/
    select?: autenticationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: autenticationInclude | null
    /**
     * Filter which autentication to delete.
     * 
    **/
    where: autenticationWhereUniqueInput
  }


  /**
   * autentication deleteMany
   */
  export type autenticationDeleteManyArgs = {
    /**
     * Filter which autentications to delete
     * 
    **/
    where?: autenticationWhereInput
  }


  /**
   * autentication: findUniqueOrThrow
   */
  export type autenticationFindUniqueOrThrowArgs = autenticationFindUniqueArgsBase
      

  /**
   * autentication: findFirstOrThrow
   */
  export type autenticationFindFirstOrThrowArgs = autenticationFindFirstArgsBase
      

  /**
   * autentication without action
   */
  export type autenticationArgs = {
    /**
     * Select specific fields to fetch from the autentication
     * 
    **/
    select?: autenticationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: autenticationInclude | null
  }



  /**
   * Model historic_usuario
   */


  export type AggregateHistoric_usuario = {
    _count: Historic_usuarioCountAggregateOutputType | null
    _avg: Historic_usuarioAvgAggregateOutputType | null
    _sum: Historic_usuarioSumAggregateOutputType | null
    _min: Historic_usuarioMinAggregateOutputType | null
    _max: Historic_usuarioMaxAggregateOutputType | null
  }

  export type Historic_usuarioAvgAggregateOutputType = {
    ID_HISTORIC_USSERS: number | null
    ID_USUARIOS: number | null
  }

  export type Historic_usuarioSumAggregateOutputType = {
    ID_HISTORIC_USSERS: number | null
    ID_USUARIOS: number | null
  }

  export type Historic_usuarioMinAggregateOutputType = {
    ID_HISTORIC_USSERS: number | null
    ID_USUARIOS: number | null
    PREV_DATA: string | null
    CURRENT_DATA: string | null
    DATE: Date | null
    IP: string | null
  }

  export type Historic_usuarioMaxAggregateOutputType = {
    ID_HISTORIC_USSERS: number | null
    ID_USUARIOS: number | null
    PREV_DATA: string | null
    CURRENT_DATA: string | null
    DATE: Date | null
    IP: string | null
  }

  export type Historic_usuarioCountAggregateOutputType = {
    ID_HISTORIC_USSERS: number
    ID_USUARIOS: number
    PREV_DATA: number
    CURRENT_DATA: number
    DATE: number
    IP: number
    _all: number
  }


  export type Historic_usuarioAvgAggregateInputType = {
    ID_HISTORIC_USSERS?: true
    ID_USUARIOS?: true
  }

  export type Historic_usuarioSumAggregateInputType = {
    ID_HISTORIC_USSERS?: true
    ID_USUARIOS?: true
  }

  export type Historic_usuarioMinAggregateInputType = {
    ID_HISTORIC_USSERS?: true
    ID_USUARIOS?: true
    PREV_DATA?: true
    CURRENT_DATA?: true
    DATE?: true
    IP?: true
  }

  export type Historic_usuarioMaxAggregateInputType = {
    ID_HISTORIC_USSERS?: true
    ID_USUARIOS?: true
    PREV_DATA?: true
    CURRENT_DATA?: true
    DATE?: true
    IP?: true
  }

  export type Historic_usuarioCountAggregateInputType = {
    ID_HISTORIC_USSERS?: true
    ID_USUARIOS?: true
    PREV_DATA?: true
    CURRENT_DATA?: true
    DATE?: true
    IP?: true
    _all?: true
  }

  export type Historic_usuarioAggregateArgs = {
    /**
     * Filter which historic_usuario to aggregate.
     * 
    **/
    where?: historic_usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historic_usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<historic_usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: historic_usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historic_usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historic_usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned historic_usuarios
    **/
    _count?: true | Historic_usuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Historic_usuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Historic_usuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Historic_usuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Historic_usuarioMaxAggregateInputType
  }

  export type GetHistoric_usuarioAggregateType<T extends Historic_usuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateHistoric_usuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistoric_usuario[P]>
      : GetScalarType<T[P], AggregateHistoric_usuario[P]>
  }




  export type Historic_usuarioGroupByArgs = {
    where?: historic_usuarioWhereInput
    orderBy?: Enumerable<historic_usuarioOrderByWithAggregationInput>
    by: Array<Historic_usuarioScalarFieldEnum>
    having?: historic_usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Historic_usuarioCountAggregateInputType | true
    _avg?: Historic_usuarioAvgAggregateInputType
    _sum?: Historic_usuarioSumAggregateInputType
    _min?: Historic_usuarioMinAggregateInputType
    _max?: Historic_usuarioMaxAggregateInputType
  }


  export type Historic_usuarioGroupByOutputType = {
    ID_HISTORIC_USSERS: number
    ID_USUARIOS: number
    PREV_DATA: string
    CURRENT_DATA: string
    DATE: Date
    IP: string
    _count: Historic_usuarioCountAggregateOutputType | null
    _avg: Historic_usuarioAvgAggregateOutputType | null
    _sum: Historic_usuarioSumAggregateOutputType | null
    _min: Historic_usuarioMinAggregateOutputType | null
    _max: Historic_usuarioMaxAggregateOutputType | null
  }

  type GetHistoric_usuarioGroupByPayload<T extends Historic_usuarioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Historic_usuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Historic_usuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Historic_usuarioGroupByOutputType[P]>
            : GetScalarType<T[P], Historic_usuarioGroupByOutputType[P]>
        }
      >
    >


  export type historic_usuarioSelect = {
    ID_HISTORIC_USSERS?: boolean
    ID_USUARIOS?: boolean
    PREV_DATA?: boolean
    CURRENT_DATA?: boolean
    DATE?: boolean
    IP?: boolean
    usuarios?: boolean | usuariosArgs
  }

  export type historic_usuarioInclude = {
    usuarios?: boolean | usuariosArgs
  }

  export type historic_usuarioGetPayload<
    S extends boolean | null | undefined | historic_usuarioArgs,
    U = keyof S
      > = S extends true
        ? historic_usuario
    : S extends undefined
    ? never
    : S extends historic_usuarioArgs | historic_usuarioFindManyArgs
    ?'include' extends U
    ? historic_usuario  & {
    [P in TrueKeys<S['include']>]:
        P extends 'usuarios' ? usuariosGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'usuarios' ? usuariosGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof historic_usuario ? historic_usuario[P] : never
  } 
    : historic_usuario
  : historic_usuario


  type historic_usuarioCountArgs = Merge<
    Omit<historic_usuarioFindManyArgs, 'select' | 'include'> & {
      select?: Historic_usuarioCountAggregateInputType | true
    }
  >

  export interface historic_usuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Historic_usuario that matches the filter.
     * @param {historic_usuarioFindUniqueArgs} args - Arguments to find a Historic_usuario
     * @example
     * // Get one Historic_usuario
     * const historic_usuario = await prisma.historic_usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends historic_usuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, historic_usuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'historic_usuario'> extends True ? CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T>>> : CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario | null, null>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T> | null, null>>

    /**
     * Find the first Historic_usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historic_usuarioFindFirstArgs} args - Arguments to find a Historic_usuario
     * @example
     * // Get one Historic_usuario
     * const historic_usuario = await prisma.historic_usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends historic_usuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, historic_usuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'historic_usuario'> extends True ? CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T>>> : CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario | null, null>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T> | null, null>>

    /**
     * Find zero or more Historic_usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historic_usuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historic_usuarios
     * const historic_usuarios = await prisma.historic_usuario.findMany()
     * 
     * // Get first 10 Historic_usuarios
     * const historic_usuarios = await prisma.historic_usuario.findMany({ take: 10 })
     * 
     * // Only select the `ID_HISTORIC_USSERS`
     * const historic_usuarioWithID_HISTORIC_USSERSOnly = await prisma.historic_usuario.findMany({ select: { ID_HISTORIC_USSERS: true } })
     * 
    **/
    findMany<T extends historic_usuarioFindManyArgs>(
      args?: SelectSubset<T, historic_usuarioFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<historic_usuario>>, PrismaPromise<Array<historic_usuarioGetPayload<T>>>>

    /**
     * Create a Historic_usuario.
     * @param {historic_usuarioCreateArgs} args - Arguments to create a Historic_usuario.
     * @example
     * // Create one Historic_usuario
     * const Historic_usuario = await prisma.historic_usuario.create({
     *   data: {
     *     // ... data to create a Historic_usuario
     *   }
     * })
     * 
    **/
    create<T extends historic_usuarioCreateArgs>(
      args: SelectSubset<T, historic_usuarioCreateArgs>
    ): CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T>>>

    /**
     * Create many Historic_usuarios.
     *     @param {historic_usuarioCreateManyArgs} args - Arguments to create many Historic_usuarios.
     *     @example
     *     // Create many Historic_usuarios
     *     const historic_usuario = await prisma.historic_usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends historic_usuarioCreateManyArgs>(
      args?: SelectSubset<T, historic_usuarioCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Historic_usuario.
     * @param {historic_usuarioDeleteArgs} args - Arguments to delete one Historic_usuario.
     * @example
     * // Delete one Historic_usuario
     * const Historic_usuario = await prisma.historic_usuario.delete({
     *   where: {
     *     // ... filter to delete one Historic_usuario
     *   }
     * })
     * 
    **/
    delete<T extends historic_usuarioDeleteArgs>(
      args: SelectSubset<T, historic_usuarioDeleteArgs>
    ): CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T>>>

    /**
     * Update one Historic_usuario.
     * @param {historic_usuarioUpdateArgs} args - Arguments to update one Historic_usuario.
     * @example
     * // Update one Historic_usuario
     * const historic_usuario = await prisma.historic_usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends historic_usuarioUpdateArgs>(
      args: SelectSubset<T, historic_usuarioUpdateArgs>
    ): CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T>>>

    /**
     * Delete zero or more Historic_usuarios.
     * @param {historic_usuarioDeleteManyArgs} args - Arguments to filter Historic_usuarios to delete.
     * @example
     * // Delete a few Historic_usuarios
     * const { count } = await prisma.historic_usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends historic_usuarioDeleteManyArgs>(
      args?: SelectSubset<T, historic_usuarioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historic_usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historic_usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historic_usuarios
     * const historic_usuario = await prisma.historic_usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends historic_usuarioUpdateManyArgs>(
      args: SelectSubset<T, historic_usuarioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Historic_usuario.
     * @param {historic_usuarioUpsertArgs} args - Arguments to update or create a Historic_usuario.
     * @example
     * // Update or create a Historic_usuario
     * const historic_usuario = await prisma.historic_usuario.upsert({
     *   create: {
     *     // ... data to create a Historic_usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historic_usuario we want to update
     *   }
     * })
    **/
    upsert<T extends historic_usuarioUpsertArgs>(
      args: SelectSubset<T, historic_usuarioUpsertArgs>
    ): CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T>>>

    /**
     * Find one Historic_usuario that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {historic_usuarioFindUniqueOrThrowArgs} args - Arguments to find a Historic_usuario
     * @example
     * // Get one Historic_usuario
     * const historic_usuario = await prisma.historic_usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends historic_usuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, historic_usuarioFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T>>>

    /**
     * Find the first Historic_usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historic_usuarioFindFirstOrThrowArgs} args - Arguments to find a Historic_usuario
     * @example
     * // Get one Historic_usuario
     * const historic_usuario = await prisma.historic_usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends historic_usuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, historic_usuarioFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__historic_usuarioClient<historic_usuario>, Prisma__historic_usuarioClient<historic_usuarioGetPayload<T>>>

    /**
     * Count the number of Historic_usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historic_usuarioCountArgs} args - Arguments to filter Historic_usuarios to count.
     * @example
     * // Count the number of Historic_usuarios
     * const count = await prisma.historic_usuario.count({
     *   where: {
     *     // ... the filter for the Historic_usuarios we want to count
     *   }
     * })
    **/
    count<T extends historic_usuarioCountArgs>(
      args?: Subset<T, historic_usuarioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Historic_usuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historic_usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historic_usuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Historic_usuarioAggregateArgs>(args: Subset<T, Historic_usuarioAggregateArgs>): PrismaPromise<GetHistoric_usuarioAggregateType<T>>

    /**
     * Group by Historic_usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historic_usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Historic_usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Historic_usuarioGroupByArgs['orderBy'] }
        : { orderBy?: Historic_usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Historic_usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoric_usuarioGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for historic_usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__historic_usuarioClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    usuarios<T extends usuariosArgs = {}>(args?: Subset<T, usuariosArgs>): CheckSelect<T, Prisma__usuariosClient<usuarios | Null>, Prisma__usuariosClient<usuariosGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * historic_usuario base type for findUnique actions
   */
  export type historic_usuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the historic_usuario
     * 
    **/
    select?: historic_usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historic_usuarioInclude | null
    /**
     * Filter, which historic_usuario to fetch.
     * 
    **/
    where: historic_usuarioWhereUniqueInput
  }

  /**
   * historic_usuario: findUnique
   */
  export interface historic_usuarioFindUniqueArgs extends historic_usuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * historic_usuario base type for findFirst actions
   */
  export type historic_usuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the historic_usuario
     * 
    **/
    select?: historic_usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historic_usuarioInclude | null
    /**
     * Filter, which historic_usuario to fetch.
     * 
    **/
    where?: historic_usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historic_usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<historic_usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historic_usuarios.
     * 
    **/
    cursor?: historic_usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historic_usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historic_usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historic_usuarios.
     * 
    **/
    distinct?: Enumerable<Historic_usuarioScalarFieldEnum>
  }

  /**
   * historic_usuario: findFirst
   */
  export interface historic_usuarioFindFirstArgs extends historic_usuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * historic_usuario findMany
   */
  export type historic_usuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the historic_usuario
     * 
    **/
    select?: historic_usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historic_usuarioInclude | null
    /**
     * Filter, which historic_usuarios to fetch.
     * 
    **/
    where?: historic_usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historic_usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<historic_usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing historic_usuarios.
     * 
    **/
    cursor?: historic_usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historic_usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historic_usuarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Historic_usuarioScalarFieldEnum>
  }


  /**
   * historic_usuario create
   */
  export type historic_usuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the historic_usuario
     * 
    **/
    select?: historic_usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historic_usuarioInclude | null
    /**
     * The data needed to create a historic_usuario.
     * 
    **/
    data: XOR<historic_usuarioCreateInput, historic_usuarioUncheckedCreateInput>
  }


  /**
   * historic_usuario createMany
   */
  export type historic_usuarioCreateManyArgs = {
    /**
     * The data used to create many historic_usuarios.
     * 
    **/
    data: Enumerable<historic_usuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * historic_usuario update
   */
  export type historic_usuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the historic_usuario
     * 
    **/
    select?: historic_usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historic_usuarioInclude | null
    /**
     * The data needed to update a historic_usuario.
     * 
    **/
    data: XOR<historic_usuarioUpdateInput, historic_usuarioUncheckedUpdateInput>
    /**
     * Choose, which historic_usuario to update.
     * 
    **/
    where: historic_usuarioWhereUniqueInput
  }


  /**
   * historic_usuario updateMany
   */
  export type historic_usuarioUpdateManyArgs = {
    /**
     * The data used to update historic_usuarios.
     * 
    **/
    data: XOR<historic_usuarioUpdateManyMutationInput, historic_usuarioUncheckedUpdateManyInput>
    /**
     * Filter which historic_usuarios to update
     * 
    **/
    where?: historic_usuarioWhereInput
  }


  /**
   * historic_usuario upsert
   */
  export type historic_usuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the historic_usuario
     * 
    **/
    select?: historic_usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historic_usuarioInclude | null
    /**
     * The filter to search for the historic_usuario to update in case it exists.
     * 
    **/
    where: historic_usuarioWhereUniqueInput
    /**
     * In case the historic_usuario found by the `where` argument doesn't exist, create a new historic_usuario with this data.
     * 
    **/
    create: XOR<historic_usuarioCreateInput, historic_usuarioUncheckedCreateInput>
    /**
     * In case the historic_usuario was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<historic_usuarioUpdateInput, historic_usuarioUncheckedUpdateInput>
  }


  /**
   * historic_usuario delete
   */
  export type historic_usuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the historic_usuario
     * 
    **/
    select?: historic_usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historic_usuarioInclude | null
    /**
     * Filter which historic_usuario to delete.
     * 
    **/
    where: historic_usuarioWhereUniqueInput
  }


  /**
   * historic_usuario deleteMany
   */
  export type historic_usuarioDeleteManyArgs = {
    /**
     * Filter which historic_usuarios to delete
     * 
    **/
    where?: historic_usuarioWhereInput
  }


  /**
   * historic_usuario: findUniqueOrThrow
   */
  export type historic_usuarioFindUniqueOrThrowArgs = historic_usuarioFindUniqueArgsBase
      

  /**
   * historic_usuario: findFirstOrThrow
   */
  export type historic_usuarioFindFirstOrThrowArgs = historic_usuarioFindFirstArgsBase
      

  /**
   * historic_usuario without action
   */
  export type historic_usuarioArgs = {
    /**
     * Select specific fields to fetch from the historic_usuario
     * 
    **/
    select?: historic_usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: historic_usuarioInclude | null
  }



  /**
   * Model rol
   */


  export type AggregateRol = {
    _count: RolCountAggregateOutputType | null
    _avg: RolAvgAggregateOutputType | null
    _sum: RolSumAggregateOutputType | null
    _min: RolMinAggregateOutputType | null
    _max: RolMaxAggregateOutputType | null
  }

  export type RolAvgAggregateOutputType = {
    ID_ROL: number | null
  }

  export type RolSumAggregateOutputType = {
    ID_ROL: number | null
  }

  export type RolMinAggregateOutputType = {
    ID_ROL: number | null
    NAME: string | null
    DESCRIPTION: string | null
    STATE: string | null
    CREATION_DATE: Date | null
  }

  export type RolMaxAggregateOutputType = {
    ID_ROL: number | null
    NAME: string | null
    DESCRIPTION: string | null
    STATE: string | null
    CREATION_DATE: Date | null
  }

  export type RolCountAggregateOutputType = {
    ID_ROL: number
    NAME: number
    DESCRIPTION: number
    STATE: number
    CREATION_DATE: number
    _all: number
  }


  export type RolAvgAggregateInputType = {
    ID_ROL?: true
  }

  export type RolSumAggregateInputType = {
    ID_ROL?: true
  }

  export type RolMinAggregateInputType = {
    ID_ROL?: true
    NAME?: true
    DESCRIPTION?: true
    STATE?: true
    CREATION_DATE?: true
  }

  export type RolMaxAggregateInputType = {
    ID_ROL?: true
    NAME?: true
    DESCRIPTION?: true
    STATE?: true
    CREATION_DATE?: true
  }

  export type RolCountAggregateInputType = {
    ID_ROL?: true
    NAME?: true
    DESCRIPTION?: true
    STATE?: true
    CREATION_DATE?: true
    _all?: true
  }

  export type RolAggregateArgs = {
    /**
     * Filter which rol to aggregate.
     * 
    **/
    where?: rolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rols to fetch.
     * 
    **/
    orderBy?: Enumerable<rolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: rolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rols from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rols.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rols
    **/
    _count?: true | RolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolMaxAggregateInputType
  }

  export type GetRolAggregateType<T extends RolAggregateArgs> = {
        [P in keyof T & keyof AggregateRol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRol[P]>
      : GetScalarType<T[P], AggregateRol[P]>
  }




  export type RolGroupByArgs = {
    where?: rolWhereInput
    orderBy?: Enumerable<rolOrderByWithAggregationInput>
    by: Array<RolScalarFieldEnum>
    having?: rolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolCountAggregateInputType | true
    _avg?: RolAvgAggregateInputType
    _sum?: RolSumAggregateInputType
    _min?: RolMinAggregateInputType
    _max?: RolMaxAggregateInputType
  }


  export type RolGroupByOutputType = {
    ID_ROL: number
    NAME: string
    DESCRIPTION: string
    STATE: string
    CREATION_DATE: Date
    _count: RolCountAggregateOutputType | null
    _avg: RolAvgAggregateOutputType | null
    _sum: RolSumAggregateOutputType | null
    _min: RolMinAggregateOutputType | null
    _max: RolMaxAggregateOutputType | null
  }

  type GetRolGroupByPayload<T extends RolGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolGroupByOutputType[P]>
            : GetScalarType<T[P], RolGroupByOutputType[P]>
        }
      >
    >


  export type rolSelect = {
    ID_ROL?: boolean
    NAME?: boolean
    DESCRIPTION?: boolean
    STATE?: boolean
    CREATION_DATE?: boolean
    ussers_rol?: boolean | ussers_rolFindManyArgs
    _count?: boolean | RolCountOutputTypeArgs
  }

  export type rolInclude = {
    ussers_rol?: boolean | ussers_rolFindManyArgs
    _count?: boolean | RolCountOutputTypeArgs
  }

  export type rolGetPayload<
    S extends boolean | null | undefined | rolArgs,
    U = keyof S
      > = S extends true
        ? rol
    : S extends undefined
    ? never
    : S extends rolArgs | rolFindManyArgs
    ?'include' extends U
    ? rol  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ussers_rol' ? Array < ussers_rolGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RolCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ussers_rol' ? Array < ussers_rolGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RolCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof rol ? rol[P] : never
  } 
    : rol
  : rol


  type rolCountArgs = Merge<
    Omit<rolFindManyArgs, 'select' | 'include'> & {
      select?: RolCountAggregateInputType | true
    }
  >

  export interface rolDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Rol that matches the filter.
     * @param {rolFindUniqueArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends rolFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, rolFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'rol'> extends True ? CheckSelect<T, Prisma__rolClient<rol>, Prisma__rolClient<rolGetPayload<T>>> : CheckSelect<T, Prisma__rolClient<rol | null, null>, Prisma__rolClient<rolGetPayload<T> | null, null>>

    /**
     * Find the first Rol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolFindFirstArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends rolFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, rolFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'rol'> extends True ? CheckSelect<T, Prisma__rolClient<rol>, Prisma__rolClient<rolGetPayload<T>>> : CheckSelect<T, Prisma__rolClient<rol | null, null>, Prisma__rolClient<rolGetPayload<T> | null, null>>

    /**
     * Find zero or more Rols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rols
     * const rols = await prisma.rol.findMany()
     * 
     * // Get first 10 Rols
     * const rols = await prisma.rol.findMany({ take: 10 })
     * 
     * // Only select the `ID_ROL`
     * const rolWithID_ROLOnly = await prisma.rol.findMany({ select: { ID_ROL: true } })
     * 
    **/
    findMany<T extends rolFindManyArgs>(
      args?: SelectSubset<T, rolFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<rol>>, PrismaPromise<Array<rolGetPayload<T>>>>

    /**
     * Create a Rol.
     * @param {rolCreateArgs} args - Arguments to create a Rol.
     * @example
     * // Create one Rol
     * const Rol = await prisma.rol.create({
     *   data: {
     *     // ... data to create a Rol
     *   }
     * })
     * 
    **/
    create<T extends rolCreateArgs>(
      args: SelectSubset<T, rolCreateArgs>
    ): CheckSelect<T, Prisma__rolClient<rol>, Prisma__rolClient<rolGetPayload<T>>>

    /**
     * Create many Rols.
     *     @param {rolCreateManyArgs} args - Arguments to create many Rols.
     *     @example
     *     // Create many Rols
     *     const rol = await prisma.rol.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends rolCreateManyArgs>(
      args?: SelectSubset<T, rolCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Rol.
     * @param {rolDeleteArgs} args - Arguments to delete one Rol.
     * @example
     * // Delete one Rol
     * const Rol = await prisma.rol.delete({
     *   where: {
     *     // ... filter to delete one Rol
     *   }
     * })
     * 
    **/
    delete<T extends rolDeleteArgs>(
      args: SelectSubset<T, rolDeleteArgs>
    ): CheckSelect<T, Prisma__rolClient<rol>, Prisma__rolClient<rolGetPayload<T>>>

    /**
     * Update one Rol.
     * @param {rolUpdateArgs} args - Arguments to update one Rol.
     * @example
     * // Update one Rol
     * const rol = await prisma.rol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rolUpdateArgs>(
      args: SelectSubset<T, rolUpdateArgs>
    ): CheckSelect<T, Prisma__rolClient<rol>, Prisma__rolClient<rolGetPayload<T>>>

    /**
     * Delete zero or more Rols.
     * @param {rolDeleteManyArgs} args - Arguments to filter Rols to delete.
     * @example
     * // Delete a few Rols
     * const { count } = await prisma.rol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rolDeleteManyArgs>(
      args?: SelectSubset<T, rolDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rols
     * const rol = await prisma.rol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rolUpdateManyArgs>(
      args: SelectSubset<T, rolUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Rol.
     * @param {rolUpsertArgs} args - Arguments to update or create a Rol.
     * @example
     * // Update or create a Rol
     * const rol = await prisma.rol.upsert({
     *   create: {
     *     // ... data to create a Rol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rol we want to update
     *   }
     * })
    **/
    upsert<T extends rolUpsertArgs>(
      args: SelectSubset<T, rolUpsertArgs>
    ): CheckSelect<T, Prisma__rolClient<rol>, Prisma__rolClient<rolGetPayload<T>>>

    /**
     * Find one Rol that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {rolFindUniqueOrThrowArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends rolFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, rolFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__rolClient<rol>, Prisma__rolClient<rolGetPayload<T>>>

    /**
     * Find the first Rol that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolFindFirstOrThrowArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends rolFindFirstOrThrowArgs>(
      args?: SelectSubset<T, rolFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__rolClient<rol>, Prisma__rolClient<rolGetPayload<T>>>

    /**
     * Count the number of Rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolCountArgs} args - Arguments to filter Rols to count.
     * @example
     * // Count the number of Rols
     * const count = await prisma.rol.count({
     *   where: {
     *     // ... the filter for the Rols we want to count
     *   }
     * })
    **/
    count<T extends rolCountArgs>(
      args?: Subset<T, rolCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolAggregateArgs>(args: Subset<T, RolAggregateArgs>): PrismaPromise<GetRolAggregateType<T>>

    /**
     * Group by Rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolGroupByArgs['orderBy'] }
        : { orderBy?: RolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for rol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rolClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ussers_rol<T extends ussers_rolFindManyArgs = {}>(args?: Subset<T, ussers_rolFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ussers_rol>| Null>, PrismaPromise<Array<ussers_rolGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * rol base type for findUnique actions
   */
  export type rolFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the rol
     * 
    **/
    select?: rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolInclude | null
    /**
     * Filter, which rol to fetch.
     * 
    **/
    where: rolWhereUniqueInput
  }

  /**
   * rol: findUnique
   */
  export interface rolFindUniqueArgs extends rolFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * rol base type for findFirst actions
   */
  export type rolFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the rol
     * 
    **/
    select?: rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolInclude | null
    /**
     * Filter, which rol to fetch.
     * 
    **/
    where?: rolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rols to fetch.
     * 
    **/
    orderBy?: Enumerable<rolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rols.
     * 
    **/
    cursor?: rolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rols from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rols.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rols.
     * 
    **/
    distinct?: Enumerable<RolScalarFieldEnum>
  }

  /**
   * rol: findFirst
   */
  export interface rolFindFirstArgs extends rolFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * rol findMany
   */
  export type rolFindManyArgs = {
    /**
     * Select specific fields to fetch from the rol
     * 
    **/
    select?: rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolInclude | null
    /**
     * Filter, which rols to fetch.
     * 
    **/
    where?: rolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rols to fetch.
     * 
    **/
    orderBy?: Enumerable<rolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rols.
     * 
    **/
    cursor?: rolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rols from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rols.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RolScalarFieldEnum>
  }


  /**
   * rol create
   */
  export type rolCreateArgs = {
    /**
     * Select specific fields to fetch from the rol
     * 
    **/
    select?: rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolInclude | null
    /**
     * The data needed to create a rol.
     * 
    **/
    data: XOR<rolCreateInput, rolUncheckedCreateInput>
  }


  /**
   * rol createMany
   */
  export type rolCreateManyArgs = {
    /**
     * The data used to create many rols.
     * 
    **/
    data: Enumerable<rolCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * rol update
   */
  export type rolUpdateArgs = {
    /**
     * Select specific fields to fetch from the rol
     * 
    **/
    select?: rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolInclude | null
    /**
     * The data needed to update a rol.
     * 
    **/
    data: XOR<rolUpdateInput, rolUncheckedUpdateInput>
    /**
     * Choose, which rol to update.
     * 
    **/
    where: rolWhereUniqueInput
  }


  /**
   * rol updateMany
   */
  export type rolUpdateManyArgs = {
    /**
     * The data used to update rols.
     * 
    **/
    data: XOR<rolUpdateManyMutationInput, rolUncheckedUpdateManyInput>
    /**
     * Filter which rols to update
     * 
    **/
    where?: rolWhereInput
  }


  /**
   * rol upsert
   */
  export type rolUpsertArgs = {
    /**
     * Select specific fields to fetch from the rol
     * 
    **/
    select?: rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolInclude | null
    /**
     * The filter to search for the rol to update in case it exists.
     * 
    **/
    where: rolWhereUniqueInput
    /**
     * In case the rol found by the `where` argument doesn't exist, create a new rol with this data.
     * 
    **/
    create: XOR<rolCreateInput, rolUncheckedCreateInput>
    /**
     * In case the rol was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<rolUpdateInput, rolUncheckedUpdateInput>
  }


  /**
   * rol delete
   */
  export type rolDeleteArgs = {
    /**
     * Select specific fields to fetch from the rol
     * 
    **/
    select?: rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolInclude | null
    /**
     * Filter which rol to delete.
     * 
    **/
    where: rolWhereUniqueInput
  }


  /**
   * rol deleteMany
   */
  export type rolDeleteManyArgs = {
    /**
     * Filter which rols to delete
     * 
    **/
    where?: rolWhereInput
  }


  /**
   * rol: findUniqueOrThrow
   */
  export type rolFindUniqueOrThrowArgs = rolFindUniqueArgsBase
      

  /**
   * rol: findFirstOrThrow
   */
  export type rolFindFirstOrThrowArgs = rolFindFirstArgsBase
      

  /**
   * rol without action
   */
  export type rolArgs = {
    /**
     * Select specific fields to fetch from the rol
     * 
    **/
    select?: rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolInclude | null
  }



  /**
   * Model ussers_rol
   */


  export type AggregateUssers_rol = {
    _count: Ussers_rolCountAggregateOutputType | null
    _avg: Ussers_rolAvgAggregateOutputType | null
    _sum: Ussers_rolSumAggregateOutputType | null
    _min: Ussers_rolMinAggregateOutputType | null
    _max: Ussers_rolMaxAggregateOutputType | null
  }

  export type Ussers_rolAvgAggregateOutputType = {
    ID_USSERS_ROL: number | null
    ID_USUARIOS: number | null
    ID_ROL: number | null
  }

  export type Ussers_rolSumAggregateOutputType = {
    ID_USSERS_ROL: number | null
    ID_USUARIOS: number | null
    ID_ROL: number | null
  }

  export type Ussers_rolMinAggregateOutputType = {
    ID_USSERS_ROL: number | null
    CREATION_DATE: Date | null
    STATE: string | null
    ID_USUARIOS: number | null
    ID_ROL: number | null
  }

  export type Ussers_rolMaxAggregateOutputType = {
    ID_USSERS_ROL: number | null
    CREATION_DATE: Date | null
    STATE: string | null
    ID_USUARIOS: number | null
    ID_ROL: number | null
  }

  export type Ussers_rolCountAggregateOutputType = {
    ID_USSERS_ROL: number
    CREATION_DATE: number
    STATE: number
    ID_USUARIOS: number
    ID_ROL: number
    _all: number
  }


  export type Ussers_rolAvgAggregateInputType = {
    ID_USSERS_ROL?: true
    ID_USUARIOS?: true
    ID_ROL?: true
  }

  export type Ussers_rolSumAggregateInputType = {
    ID_USSERS_ROL?: true
    ID_USUARIOS?: true
    ID_ROL?: true
  }

  export type Ussers_rolMinAggregateInputType = {
    ID_USSERS_ROL?: true
    CREATION_DATE?: true
    STATE?: true
    ID_USUARIOS?: true
    ID_ROL?: true
  }

  export type Ussers_rolMaxAggregateInputType = {
    ID_USSERS_ROL?: true
    CREATION_DATE?: true
    STATE?: true
    ID_USUARIOS?: true
    ID_ROL?: true
  }

  export type Ussers_rolCountAggregateInputType = {
    ID_USSERS_ROL?: true
    CREATION_DATE?: true
    STATE?: true
    ID_USUARIOS?: true
    ID_ROL?: true
    _all?: true
  }

  export type Ussers_rolAggregateArgs = {
    /**
     * Filter which ussers_rol to aggregate.
     * 
    **/
    where?: ussers_rolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ussers_rols to fetch.
     * 
    **/
    orderBy?: Enumerable<ussers_rolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ussers_rolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ussers_rols from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ussers_rols.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ussers_rols
    **/
    _count?: true | Ussers_rolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ussers_rolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ussers_rolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ussers_rolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ussers_rolMaxAggregateInputType
  }

  export type GetUssers_rolAggregateType<T extends Ussers_rolAggregateArgs> = {
        [P in keyof T & keyof AggregateUssers_rol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUssers_rol[P]>
      : GetScalarType<T[P], AggregateUssers_rol[P]>
  }




  export type Ussers_rolGroupByArgs = {
    where?: ussers_rolWhereInput
    orderBy?: Enumerable<ussers_rolOrderByWithAggregationInput>
    by: Array<Ussers_rolScalarFieldEnum>
    having?: ussers_rolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ussers_rolCountAggregateInputType | true
    _avg?: Ussers_rolAvgAggregateInputType
    _sum?: Ussers_rolSumAggregateInputType
    _min?: Ussers_rolMinAggregateInputType
    _max?: Ussers_rolMaxAggregateInputType
  }


  export type Ussers_rolGroupByOutputType = {
    ID_USSERS_ROL: number
    CREATION_DATE: Date
    STATE: string
    ID_USUARIOS: number
    ID_ROL: number
    _count: Ussers_rolCountAggregateOutputType | null
    _avg: Ussers_rolAvgAggregateOutputType | null
    _sum: Ussers_rolSumAggregateOutputType | null
    _min: Ussers_rolMinAggregateOutputType | null
    _max: Ussers_rolMaxAggregateOutputType | null
  }

  type GetUssers_rolGroupByPayload<T extends Ussers_rolGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Ussers_rolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ussers_rolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ussers_rolGroupByOutputType[P]>
            : GetScalarType<T[P], Ussers_rolGroupByOutputType[P]>
        }
      >
    >


  export type ussers_rolSelect = {
    ID_USSERS_ROL?: boolean
    CREATION_DATE?: boolean
    STATE?: boolean
    ID_USUARIOS?: boolean
    ID_ROL?: boolean
    rol?: boolean | rolArgs
    usuarios?: boolean | usuariosArgs
  }

  export type ussers_rolInclude = {
    rol?: boolean | rolArgs
    usuarios?: boolean | usuariosArgs
  }

  export type ussers_rolGetPayload<
    S extends boolean | null | undefined | ussers_rolArgs,
    U = keyof S
      > = S extends true
        ? ussers_rol
    : S extends undefined
    ? never
    : S extends ussers_rolArgs | ussers_rolFindManyArgs
    ?'include' extends U
    ? ussers_rol  & {
    [P in TrueKeys<S['include']>]:
        P extends 'rol' ? rolGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'usuarios' ? usuariosGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'rol' ? rolGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'usuarios' ? usuariosGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof ussers_rol ? ussers_rol[P] : never
  } 
    : ussers_rol
  : ussers_rol


  type ussers_rolCountArgs = Merge<
    Omit<ussers_rolFindManyArgs, 'select' | 'include'> & {
      select?: Ussers_rolCountAggregateInputType | true
    }
  >

  export interface ussers_rolDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Ussers_rol that matches the filter.
     * @param {ussers_rolFindUniqueArgs} args - Arguments to find a Ussers_rol
     * @example
     * // Get one Ussers_rol
     * const ussers_rol = await prisma.ussers_rol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ussers_rolFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ussers_rolFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ussers_rol'> extends True ? CheckSelect<T, Prisma__ussers_rolClient<ussers_rol>, Prisma__ussers_rolClient<ussers_rolGetPayload<T>>> : CheckSelect<T, Prisma__ussers_rolClient<ussers_rol | null, null>, Prisma__ussers_rolClient<ussers_rolGetPayload<T> | null, null>>

    /**
     * Find the first Ussers_rol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ussers_rolFindFirstArgs} args - Arguments to find a Ussers_rol
     * @example
     * // Get one Ussers_rol
     * const ussers_rol = await prisma.ussers_rol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ussers_rolFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ussers_rolFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ussers_rol'> extends True ? CheckSelect<T, Prisma__ussers_rolClient<ussers_rol>, Prisma__ussers_rolClient<ussers_rolGetPayload<T>>> : CheckSelect<T, Prisma__ussers_rolClient<ussers_rol | null, null>, Prisma__ussers_rolClient<ussers_rolGetPayload<T> | null, null>>

    /**
     * Find zero or more Ussers_rols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ussers_rolFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ussers_rols
     * const ussers_rols = await prisma.ussers_rol.findMany()
     * 
     * // Get first 10 Ussers_rols
     * const ussers_rols = await prisma.ussers_rol.findMany({ take: 10 })
     * 
     * // Only select the `ID_USSERS_ROL`
     * const ussers_rolWithID_USSERS_ROLOnly = await prisma.ussers_rol.findMany({ select: { ID_USSERS_ROL: true } })
     * 
    **/
    findMany<T extends ussers_rolFindManyArgs>(
      args?: SelectSubset<T, ussers_rolFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ussers_rol>>, PrismaPromise<Array<ussers_rolGetPayload<T>>>>

    /**
     * Create a Ussers_rol.
     * @param {ussers_rolCreateArgs} args - Arguments to create a Ussers_rol.
     * @example
     * // Create one Ussers_rol
     * const Ussers_rol = await prisma.ussers_rol.create({
     *   data: {
     *     // ... data to create a Ussers_rol
     *   }
     * })
     * 
    **/
    create<T extends ussers_rolCreateArgs>(
      args: SelectSubset<T, ussers_rolCreateArgs>
    ): CheckSelect<T, Prisma__ussers_rolClient<ussers_rol>, Prisma__ussers_rolClient<ussers_rolGetPayload<T>>>

    /**
     * Create many Ussers_rols.
     *     @param {ussers_rolCreateManyArgs} args - Arguments to create many Ussers_rols.
     *     @example
     *     // Create many Ussers_rols
     *     const ussers_rol = await prisma.ussers_rol.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ussers_rolCreateManyArgs>(
      args?: SelectSubset<T, ussers_rolCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Ussers_rol.
     * @param {ussers_rolDeleteArgs} args - Arguments to delete one Ussers_rol.
     * @example
     * // Delete one Ussers_rol
     * const Ussers_rol = await prisma.ussers_rol.delete({
     *   where: {
     *     // ... filter to delete one Ussers_rol
     *   }
     * })
     * 
    **/
    delete<T extends ussers_rolDeleteArgs>(
      args: SelectSubset<T, ussers_rolDeleteArgs>
    ): CheckSelect<T, Prisma__ussers_rolClient<ussers_rol>, Prisma__ussers_rolClient<ussers_rolGetPayload<T>>>

    /**
     * Update one Ussers_rol.
     * @param {ussers_rolUpdateArgs} args - Arguments to update one Ussers_rol.
     * @example
     * // Update one Ussers_rol
     * const ussers_rol = await prisma.ussers_rol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ussers_rolUpdateArgs>(
      args: SelectSubset<T, ussers_rolUpdateArgs>
    ): CheckSelect<T, Prisma__ussers_rolClient<ussers_rol>, Prisma__ussers_rolClient<ussers_rolGetPayload<T>>>

    /**
     * Delete zero or more Ussers_rols.
     * @param {ussers_rolDeleteManyArgs} args - Arguments to filter Ussers_rols to delete.
     * @example
     * // Delete a few Ussers_rols
     * const { count } = await prisma.ussers_rol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ussers_rolDeleteManyArgs>(
      args?: SelectSubset<T, ussers_rolDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ussers_rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ussers_rolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ussers_rols
     * const ussers_rol = await prisma.ussers_rol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ussers_rolUpdateManyArgs>(
      args: SelectSubset<T, ussers_rolUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Ussers_rol.
     * @param {ussers_rolUpsertArgs} args - Arguments to update or create a Ussers_rol.
     * @example
     * // Update or create a Ussers_rol
     * const ussers_rol = await prisma.ussers_rol.upsert({
     *   create: {
     *     // ... data to create a Ussers_rol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ussers_rol we want to update
     *   }
     * })
    **/
    upsert<T extends ussers_rolUpsertArgs>(
      args: SelectSubset<T, ussers_rolUpsertArgs>
    ): CheckSelect<T, Prisma__ussers_rolClient<ussers_rol>, Prisma__ussers_rolClient<ussers_rolGetPayload<T>>>

    /**
     * Find one Ussers_rol that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ussers_rolFindUniqueOrThrowArgs} args - Arguments to find a Ussers_rol
     * @example
     * // Get one Ussers_rol
     * const ussers_rol = await prisma.ussers_rol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ussers_rolFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ussers_rolFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ussers_rolClient<ussers_rol>, Prisma__ussers_rolClient<ussers_rolGetPayload<T>>>

    /**
     * Find the first Ussers_rol that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ussers_rolFindFirstOrThrowArgs} args - Arguments to find a Ussers_rol
     * @example
     * // Get one Ussers_rol
     * const ussers_rol = await prisma.ussers_rol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ussers_rolFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ussers_rolFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ussers_rolClient<ussers_rol>, Prisma__ussers_rolClient<ussers_rolGetPayload<T>>>

    /**
     * Count the number of Ussers_rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ussers_rolCountArgs} args - Arguments to filter Ussers_rols to count.
     * @example
     * // Count the number of Ussers_rols
     * const count = await prisma.ussers_rol.count({
     *   where: {
     *     // ... the filter for the Ussers_rols we want to count
     *   }
     * })
    **/
    count<T extends ussers_rolCountArgs>(
      args?: Subset<T, ussers_rolCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ussers_rolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ussers_rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ussers_rolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ussers_rolAggregateArgs>(args: Subset<T, Ussers_rolAggregateArgs>): PrismaPromise<GetUssers_rolAggregateType<T>>

    /**
     * Group by Ussers_rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ussers_rolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Ussers_rolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Ussers_rolGroupByArgs['orderBy'] }
        : { orderBy?: Ussers_rolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Ussers_rolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUssers_rolGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ussers_rol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ussers_rolClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rol<T extends rolArgs = {}>(args?: Subset<T, rolArgs>): CheckSelect<T, Prisma__rolClient<rol | Null>, Prisma__rolClient<rolGetPayload<T> | Null>>;

    usuarios<T extends usuariosArgs = {}>(args?: Subset<T, usuariosArgs>): CheckSelect<T, Prisma__usuariosClient<usuarios | Null>, Prisma__usuariosClient<usuariosGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ussers_rol base type for findUnique actions
   */
  export type ussers_rolFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ussers_rol
     * 
    **/
    select?: ussers_rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ussers_rolInclude | null
    /**
     * Filter, which ussers_rol to fetch.
     * 
    **/
    where: ussers_rolWhereUniqueInput
  }

  /**
   * ussers_rol: findUnique
   */
  export interface ussers_rolFindUniqueArgs extends ussers_rolFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ussers_rol base type for findFirst actions
   */
  export type ussers_rolFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ussers_rol
     * 
    **/
    select?: ussers_rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ussers_rolInclude | null
    /**
     * Filter, which ussers_rol to fetch.
     * 
    **/
    where?: ussers_rolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ussers_rols to fetch.
     * 
    **/
    orderBy?: Enumerable<ussers_rolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ussers_rols.
     * 
    **/
    cursor?: ussers_rolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ussers_rols from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ussers_rols.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ussers_rols.
     * 
    **/
    distinct?: Enumerable<Ussers_rolScalarFieldEnum>
  }

  /**
   * ussers_rol: findFirst
   */
  export interface ussers_rolFindFirstArgs extends ussers_rolFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ussers_rol findMany
   */
  export type ussers_rolFindManyArgs = {
    /**
     * Select specific fields to fetch from the ussers_rol
     * 
    **/
    select?: ussers_rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ussers_rolInclude | null
    /**
     * Filter, which ussers_rols to fetch.
     * 
    **/
    where?: ussers_rolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ussers_rols to fetch.
     * 
    **/
    orderBy?: Enumerable<ussers_rolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ussers_rols.
     * 
    **/
    cursor?: ussers_rolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ussers_rols from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ussers_rols.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Ussers_rolScalarFieldEnum>
  }


  /**
   * ussers_rol create
   */
  export type ussers_rolCreateArgs = {
    /**
     * Select specific fields to fetch from the ussers_rol
     * 
    **/
    select?: ussers_rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ussers_rolInclude | null
    /**
     * The data needed to create a ussers_rol.
     * 
    **/
    data: XOR<ussers_rolCreateInput, ussers_rolUncheckedCreateInput>
  }


  /**
   * ussers_rol createMany
   */
  export type ussers_rolCreateManyArgs = {
    /**
     * The data used to create many ussers_rols.
     * 
    **/
    data: Enumerable<ussers_rolCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ussers_rol update
   */
  export type ussers_rolUpdateArgs = {
    /**
     * Select specific fields to fetch from the ussers_rol
     * 
    **/
    select?: ussers_rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ussers_rolInclude | null
    /**
     * The data needed to update a ussers_rol.
     * 
    **/
    data: XOR<ussers_rolUpdateInput, ussers_rolUncheckedUpdateInput>
    /**
     * Choose, which ussers_rol to update.
     * 
    **/
    where: ussers_rolWhereUniqueInput
  }


  /**
   * ussers_rol updateMany
   */
  export type ussers_rolUpdateManyArgs = {
    /**
     * The data used to update ussers_rols.
     * 
    **/
    data: XOR<ussers_rolUpdateManyMutationInput, ussers_rolUncheckedUpdateManyInput>
    /**
     * Filter which ussers_rols to update
     * 
    **/
    where?: ussers_rolWhereInput
  }


  /**
   * ussers_rol upsert
   */
  export type ussers_rolUpsertArgs = {
    /**
     * Select specific fields to fetch from the ussers_rol
     * 
    **/
    select?: ussers_rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ussers_rolInclude | null
    /**
     * The filter to search for the ussers_rol to update in case it exists.
     * 
    **/
    where: ussers_rolWhereUniqueInput
    /**
     * In case the ussers_rol found by the `where` argument doesn't exist, create a new ussers_rol with this data.
     * 
    **/
    create: XOR<ussers_rolCreateInput, ussers_rolUncheckedCreateInput>
    /**
     * In case the ussers_rol was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ussers_rolUpdateInput, ussers_rolUncheckedUpdateInput>
  }


  /**
   * ussers_rol delete
   */
  export type ussers_rolDeleteArgs = {
    /**
     * Select specific fields to fetch from the ussers_rol
     * 
    **/
    select?: ussers_rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ussers_rolInclude | null
    /**
     * Filter which ussers_rol to delete.
     * 
    **/
    where: ussers_rolWhereUniqueInput
  }


  /**
   * ussers_rol deleteMany
   */
  export type ussers_rolDeleteManyArgs = {
    /**
     * Filter which ussers_rols to delete
     * 
    **/
    where?: ussers_rolWhereInput
  }


  /**
   * ussers_rol: findUniqueOrThrow
   */
  export type ussers_rolFindUniqueOrThrowArgs = ussers_rolFindUniqueArgsBase
      

  /**
   * ussers_rol: findFirstOrThrow
   */
  export type ussers_rolFindFirstOrThrowArgs = ussers_rolFindFirstArgsBase
      

  /**
   * ussers_rol without action
   */
  export type ussers_rolArgs = {
    /**
     * Select specific fields to fetch from the ussers_rol
     * 
    **/
    select?: ussers_rolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ussers_rolInclude | null
  }



  /**
   * Model log_connection
   */


  export type AggregateLog_connection = {
    _count: Log_connectionCountAggregateOutputType | null
    _avg: Log_connectionAvgAggregateOutputType | null
    _sum: Log_connectionSumAggregateOutputType | null
    _min: Log_connectionMinAggregateOutputType | null
    _max: Log_connectionMaxAggregateOutputType | null
  }

  export type Log_connectionAvgAggregateOutputType = {
    ID_USSERS_ROL: number | null
    ID_USUARIOS: number | null
  }

  export type Log_connectionSumAggregateOutputType = {
    ID_USSERS_ROL: number | null
    ID_USUARIOS: number | null
  }

  export type Log_connectionMinAggregateOutputType = {
    ID_USSERS_ROL: number | null
    INITIAL_DATE: Date | null
    FINAL_DATE: Date | null
    STATE: string | null
    ID_USUARIOS: number | null
  }

  export type Log_connectionMaxAggregateOutputType = {
    ID_USSERS_ROL: number | null
    INITIAL_DATE: Date | null
    FINAL_DATE: Date | null
    STATE: string | null
    ID_USUARIOS: number | null
  }

  export type Log_connectionCountAggregateOutputType = {
    ID_USSERS_ROL: number
    INITIAL_DATE: number
    FINAL_DATE: number
    STATE: number
    ID_USUARIOS: number
    _all: number
  }


  export type Log_connectionAvgAggregateInputType = {
    ID_USSERS_ROL?: true
    ID_USUARIOS?: true
  }

  export type Log_connectionSumAggregateInputType = {
    ID_USSERS_ROL?: true
    ID_USUARIOS?: true
  }

  export type Log_connectionMinAggregateInputType = {
    ID_USSERS_ROL?: true
    INITIAL_DATE?: true
    FINAL_DATE?: true
    STATE?: true
    ID_USUARIOS?: true
  }

  export type Log_connectionMaxAggregateInputType = {
    ID_USSERS_ROL?: true
    INITIAL_DATE?: true
    FINAL_DATE?: true
    STATE?: true
    ID_USUARIOS?: true
  }

  export type Log_connectionCountAggregateInputType = {
    ID_USSERS_ROL?: true
    INITIAL_DATE?: true
    FINAL_DATE?: true
    STATE?: true
    ID_USUARIOS?: true
    _all?: true
  }

  export type Log_connectionAggregateArgs = {
    /**
     * Filter which log_connection to aggregate.
     * 
    **/
    where?: log_connectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of log_connections to fetch.
     * 
    **/
    orderBy?: Enumerable<log_connectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: log_connectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` log_connections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` log_connections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned log_connections
    **/
    _count?: true | Log_connectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Log_connectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Log_connectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Log_connectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Log_connectionMaxAggregateInputType
  }

  export type GetLog_connectionAggregateType<T extends Log_connectionAggregateArgs> = {
        [P in keyof T & keyof AggregateLog_connection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog_connection[P]>
      : GetScalarType<T[P], AggregateLog_connection[P]>
  }




  export type Log_connectionGroupByArgs = {
    where?: log_connectionWhereInput
    orderBy?: Enumerable<log_connectionOrderByWithAggregationInput>
    by: Array<Log_connectionScalarFieldEnum>
    having?: log_connectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Log_connectionCountAggregateInputType | true
    _avg?: Log_connectionAvgAggregateInputType
    _sum?: Log_connectionSumAggregateInputType
    _min?: Log_connectionMinAggregateInputType
    _max?: Log_connectionMaxAggregateInputType
  }


  export type Log_connectionGroupByOutputType = {
    ID_USSERS_ROL: number
    INITIAL_DATE: Date
    FINAL_DATE: Date
    STATE: string
    ID_USUARIOS: number
    _count: Log_connectionCountAggregateOutputType | null
    _avg: Log_connectionAvgAggregateOutputType | null
    _sum: Log_connectionSumAggregateOutputType | null
    _min: Log_connectionMinAggregateOutputType | null
    _max: Log_connectionMaxAggregateOutputType | null
  }

  type GetLog_connectionGroupByPayload<T extends Log_connectionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Log_connectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Log_connectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Log_connectionGroupByOutputType[P]>
            : GetScalarType<T[P], Log_connectionGroupByOutputType[P]>
        }
      >
    >


  export type log_connectionSelect = {
    ID_USSERS_ROL?: boolean
    INITIAL_DATE?: boolean
    FINAL_DATE?: boolean
    STATE?: boolean
    ID_USUARIOS?: boolean
    usuarios?: boolean | usuariosArgs
  }

  export type log_connectionInclude = {
    usuarios?: boolean | usuariosArgs
  }

  export type log_connectionGetPayload<
    S extends boolean | null | undefined | log_connectionArgs,
    U = keyof S
      > = S extends true
        ? log_connection
    : S extends undefined
    ? never
    : S extends log_connectionArgs | log_connectionFindManyArgs
    ?'include' extends U
    ? log_connection  & {
    [P in TrueKeys<S['include']>]:
        P extends 'usuarios' ? usuariosGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'usuarios' ? usuariosGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof log_connection ? log_connection[P] : never
  } 
    : log_connection
  : log_connection


  type log_connectionCountArgs = Merge<
    Omit<log_connectionFindManyArgs, 'select' | 'include'> & {
      select?: Log_connectionCountAggregateInputType | true
    }
  >

  export interface log_connectionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Log_connection that matches the filter.
     * @param {log_connectionFindUniqueArgs} args - Arguments to find a Log_connection
     * @example
     * // Get one Log_connection
     * const log_connection = await prisma.log_connection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends log_connectionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, log_connectionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'log_connection'> extends True ? CheckSelect<T, Prisma__log_connectionClient<log_connection>, Prisma__log_connectionClient<log_connectionGetPayload<T>>> : CheckSelect<T, Prisma__log_connectionClient<log_connection | null, null>, Prisma__log_connectionClient<log_connectionGetPayload<T> | null, null>>

    /**
     * Find the first Log_connection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {log_connectionFindFirstArgs} args - Arguments to find a Log_connection
     * @example
     * // Get one Log_connection
     * const log_connection = await prisma.log_connection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends log_connectionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, log_connectionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'log_connection'> extends True ? CheckSelect<T, Prisma__log_connectionClient<log_connection>, Prisma__log_connectionClient<log_connectionGetPayload<T>>> : CheckSelect<T, Prisma__log_connectionClient<log_connection | null, null>, Prisma__log_connectionClient<log_connectionGetPayload<T> | null, null>>

    /**
     * Find zero or more Log_connections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {log_connectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Log_connections
     * const log_connections = await prisma.log_connection.findMany()
     * 
     * // Get first 10 Log_connections
     * const log_connections = await prisma.log_connection.findMany({ take: 10 })
     * 
     * // Only select the `ID_USSERS_ROL`
     * const log_connectionWithID_USSERS_ROLOnly = await prisma.log_connection.findMany({ select: { ID_USSERS_ROL: true } })
     * 
    **/
    findMany<T extends log_connectionFindManyArgs>(
      args?: SelectSubset<T, log_connectionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<log_connection>>, PrismaPromise<Array<log_connectionGetPayload<T>>>>

    /**
     * Create a Log_connection.
     * @param {log_connectionCreateArgs} args - Arguments to create a Log_connection.
     * @example
     * // Create one Log_connection
     * const Log_connection = await prisma.log_connection.create({
     *   data: {
     *     // ... data to create a Log_connection
     *   }
     * })
     * 
    **/
    create<T extends log_connectionCreateArgs>(
      args: SelectSubset<T, log_connectionCreateArgs>
    ): CheckSelect<T, Prisma__log_connectionClient<log_connection>, Prisma__log_connectionClient<log_connectionGetPayload<T>>>

    /**
     * Create many Log_connections.
     *     @param {log_connectionCreateManyArgs} args - Arguments to create many Log_connections.
     *     @example
     *     // Create many Log_connections
     *     const log_connection = await prisma.log_connection.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends log_connectionCreateManyArgs>(
      args?: SelectSubset<T, log_connectionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Log_connection.
     * @param {log_connectionDeleteArgs} args - Arguments to delete one Log_connection.
     * @example
     * // Delete one Log_connection
     * const Log_connection = await prisma.log_connection.delete({
     *   where: {
     *     // ... filter to delete one Log_connection
     *   }
     * })
     * 
    **/
    delete<T extends log_connectionDeleteArgs>(
      args: SelectSubset<T, log_connectionDeleteArgs>
    ): CheckSelect<T, Prisma__log_connectionClient<log_connection>, Prisma__log_connectionClient<log_connectionGetPayload<T>>>

    /**
     * Update one Log_connection.
     * @param {log_connectionUpdateArgs} args - Arguments to update one Log_connection.
     * @example
     * // Update one Log_connection
     * const log_connection = await prisma.log_connection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends log_connectionUpdateArgs>(
      args: SelectSubset<T, log_connectionUpdateArgs>
    ): CheckSelect<T, Prisma__log_connectionClient<log_connection>, Prisma__log_connectionClient<log_connectionGetPayload<T>>>

    /**
     * Delete zero or more Log_connections.
     * @param {log_connectionDeleteManyArgs} args - Arguments to filter Log_connections to delete.
     * @example
     * // Delete a few Log_connections
     * const { count } = await prisma.log_connection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends log_connectionDeleteManyArgs>(
      args?: SelectSubset<T, log_connectionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Log_connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {log_connectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Log_connections
     * const log_connection = await prisma.log_connection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends log_connectionUpdateManyArgs>(
      args: SelectSubset<T, log_connectionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Log_connection.
     * @param {log_connectionUpsertArgs} args - Arguments to update or create a Log_connection.
     * @example
     * // Update or create a Log_connection
     * const log_connection = await prisma.log_connection.upsert({
     *   create: {
     *     // ... data to create a Log_connection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log_connection we want to update
     *   }
     * })
    **/
    upsert<T extends log_connectionUpsertArgs>(
      args: SelectSubset<T, log_connectionUpsertArgs>
    ): CheckSelect<T, Prisma__log_connectionClient<log_connection>, Prisma__log_connectionClient<log_connectionGetPayload<T>>>

    /**
     * Find one Log_connection that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {log_connectionFindUniqueOrThrowArgs} args - Arguments to find a Log_connection
     * @example
     * // Get one Log_connection
     * const log_connection = await prisma.log_connection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends log_connectionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, log_connectionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__log_connectionClient<log_connection>, Prisma__log_connectionClient<log_connectionGetPayload<T>>>

    /**
     * Find the first Log_connection that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {log_connectionFindFirstOrThrowArgs} args - Arguments to find a Log_connection
     * @example
     * // Get one Log_connection
     * const log_connection = await prisma.log_connection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends log_connectionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, log_connectionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__log_connectionClient<log_connection>, Prisma__log_connectionClient<log_connectionGetPayload<T>>>

    /**
     * Count the number of Log_connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {log_connectionCountArgs} args - Arguments to filter Log_connections to count.
     * @example
     * // Count the number of Log_connections
     * const count = await prisma.log_connection.count({
     *   where: {
     *     // ... the filter for the Log_connections we want to count
     *   }
     * })
    **/
    count<T extends log_connectionCountArgs>(
      args?: Subset<T, log_connectionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Log_connectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log_connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_connectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Log_connectionAggregateArgs>(args: Subset<T, Log_connectionAggregateArgs>): PrismaPromise<GetLog_connectionAggregateType<T>>

    /**
     * Group by Log_connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Log_connectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Log_connectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Log_connectionGroupByArgs['orderBy'] }
        : { orderBy?: Log_connectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Log_connectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLog_connectionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for log_connection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__log_connectionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    usuarios<T extends usuariosArgs = {}>(args?: Subset<T, usuariosArgs>): CheckSelect<T, Prisma__usuariosClient<usuarios | Null>, Prisma__usuariosClient<usuariosGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * log_connection base type for findUnique actions
   */
  export type log_connectionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the log_connection
     * 
    **/
    select?: log_connectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: log_connectionInclude | null
    /**
     * Filter, which log_connection to fetch.
     * 
    **/
    where: log_connectionWhereUniqueInput
  }

  /**
   * log_connection: findUnique
   */
  export interface log_connectionFindUniqueArgs extends log_connectionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * log_connection base type for findFirst actions
   */
  export type log_connectionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the log_connection
     * 
    **/
    select?: log_connectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: log_connectionInclude | null
    /**
     * Filter, which log_connection to fetch.
     * 
    **/
    where?: log_connectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of log_connections to fetch.
     * 
    **/
    orderBy?: Enumerable<log_connectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for log_connections.
     * 
    **/
    cursor?: log_connectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` log_connections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` log_connections.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of log_connections.
     * 
    **/
    distinct?: Enumerable<Log_connectionScalarFieldEnum>
  }

  /**
   * log_connection: findFirst
   */
  export interface log_connectionFindFirstArgs extends log_connectionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * log_connection findMany
   */
  export type log_connectionFindManyArgs = {
    /**
     * Select specific fields to fetch from the log_connection
     * 
    **/
    select?: log_connectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: log_connectionInclude | null
    /**
     * Filter, which log_connections to fetch.
     * 
    **/
    where?: log_connectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of log_connections to fetch.
     * 
    **/
    orderBy?: Enumerable<log_connectionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing log_connections.
     * 
    **/
    cursor?: log_connectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` log_connections from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` log_connections.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Log_connectionScalarFieldEnum>
  }


  /**
   * log_connection create
   */
  export type log_connectionCreateArgs = {
    /**
     * Select specific fields to fetch from the log_connection
     * 
    **/
    select?: log_connectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: log_connectionInclude | null
    /**
     * The data needed to create a log_connection.
     * 
    **/
    data: XOR<log_connectionCreateInput, log_connectionUncheckedCreateInput>
  }


  /**
   * log_connection createMany
   */
  export type log_connectionCreateManyArgs = {
    /**
     * The data used to create many log_connections.
     * 
    **/
    data: Enumerable<log_connectionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * log_connection update
   */
  export type log_connectionUpdateArgs = {
    /**
     * Select specific fields to fetch from the log_connection
     * 
    **/
    select?: log_connectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: log_connectionInclude | null
    /**
     * The data needed to update a log_connection.
     * 
    **/
    data: XOR<log_connectionUpdateInput, log_connectionUncheckedUpdateInput>
    /**
     * Choose, which log_connection to update.
     * 
    **/
    where: log_connectionWhereUniqueInput
  }


  /**
   * log_connection updateMany
   */
  export type log_connectionUpdateManyArgs = {
    /**
     * The data used to update log_connections.
     * 
    **/
    data: XOR<log_connectionUpdateManyMutationInput, log_connectionUncheckedUpdateManyInput>
    /**
     * Filter which log_connections to update
     * 
    **/
    where?: log_connectionWhereInput
  }


  /**
   * log_connection upsert
   */
  export type log_connectionUpsertArgs = {
    /**
     * Select specific fields to fetch from the log_connection
     * 
    **/
    select?: log_connectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: log_connectionInclude | null
    /**
     * The filter to search for the log_connection to update in case it exists.
     * 
    **/
    where: log_connectionWhereUniqueInput
    /**
     * In case the log_connection found by the `where` argument doesn't exist, create a new log_connection with this data.
     * 
    **/
    create: XOR<log_connectionCreateInput, log_connectionUncheckedCreateInput>
    /**
     * In case the log_connection was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<log_connectionUpdateInput, log_connectionUncheckedUpdateInput>
  }


  /**
   * log_connection delete
   */
  export type log_connectionDeleteArgs = {
    /**
     * Select specific fields to fetch from the log_connection
     * 
    **/
    select?: log_connectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: log_connectionInclude | null
    /**
     * Filter which log_connection to delete.
     * 
    **/
    where: log_connectionWhereUniqueInput
  }


  /**
   * log_connection deleteMany
   */
  export type log_connectionDeleteManyArgs = {
    /**
     * Filter which log_connections to delete
     * 
    **/
    where?: log_connectionWhereInput
  }


  /**
   * log_connection: findUniqueOrThrow
   */
  export type log_connectionFindUniqueOrThrowArgs = log_connectionFindUniqueArgsBase
      

  /**
   * log_connection: findFirstOrThrow
   */
  export type log_connectionFindFirstOrThrowArgs = log_connectionFindFirstArgsBase
      

  /**
   * log_connection without action
   */
  export type log_connectionArgs = {
    /**
     * Select specific fields to fetch from the log_connection
     * 
    **/
    select?: log_connectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: log_connectionInclude | null
  }



  /**
   * Model usuarios
   */


  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    ID_USUARIOS: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    ID_USUARIOS: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    ID_USUARIOS: number | null
    NAME: string | null
    LAST_NAME: string | null
    EMAIL: string | null
    TYPE_DOCUMENT: string | null
    DOCUMENT: string | null
    STATE: string | null
    CREATION_DATE: Date | null
  }

  export type UsuariosMaxAggregateOutputType = {
    ID_USUARIOS: number | null
    NAME: string | null
    LAST_NAME: string | null
    EMAIL: string | null
    TYPE_DOCUMENT: string | null
    DOCUMENT: string | null
    STATE: string | null
    CREATION_DATE: Date | null
  }

  export type UsuariosCountAggregateOutputType = {
    ID_USUARIOS: number
    NAME: number
    LAST_NAME: number
    EMAIL: number
    TYPE_DOCUMENT: number
    DOCUMENT: number
    STATE: number
    CREATION_DATE: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    ID_USUARIOS?: true
  }

  export type UsuariosSumAggregateInputType = {
    ID_USUARIOS?: true
  }

  export type UsuariosMinAggregateInputType = {
    ID_USUARIOS?: true
    NAME?: true
    LAST_NAME?: true
    EMAIL?: true
    TYPE_DOCUMENT?: true
    DOCUMENT?: true
    STATE?: true
    CREATION_DATE?: true
  }

  export type UsuariosMaxAggregateInputType = {
    ID_USUARIOS?: true
    NAME?: true
    LAST_NAME?: true
    EMAIL?: true
    TYPE_DOCUMENT?: true
    DOCUMENT?: true
    STATE?: true
    CREATION_DATE?: true
  }

  export type UsuariosCountAggregateInputType = {
    ID_USUARIOS?: true
    NAME?: true
    LAST_NAME?: true
    EMAIL?: true
    TYPE_DOCUMENT?: true
    DOCUMENT?: true
    STATE?: true
    CREATION_DATE?: true
    _all?: true
  }

  export type UsuariosAggregateArgs = {
    /**
     * Filter which usuarios to aggregate.
     * 
    **/
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs = {
    where?: usuariosWhereInput
    orderBy?: Enumerable<usuariosOrderByWithAggregationInput>
    by: Array<UsuariosScalarFieldEnum>
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }


  export type UsuariosGroupByOutputType = {
    ID_USUARIOS: number
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect = {
    ID_USUARIOS?: boolean
    NAME?: boolean
    LAST_NAME?: boolean
    EMAIL?: boolean
    TYPE_DOCUMENT?: boolean
    DOCUMENT?: boolean
    STATE?: boolean
    CREATION_DATE?: boolean
    autentication?: boolean | autenticationFindManyArgs
    historic_usuario?: boolean | historic_usuarioFindManyArgs
    ussers_rol?: boolean | ussers_rolFindManyArgs
    log_connection?: boolean | log_connectionFindManyArgs
    _count?: boolean | UsuariosCountOutputTypeArgs
  }

  export type usuariosInclude = {
    autentication?: boolean | autenticationFindManyArgs
    historic_usuario?: boolean | historic_usuarioFindManyArgs
    ussers_rol?: boolean | ussers_rolFindManyArgs
    log_connection?: boolean | log_connectionFindManyArgs
    _count?: boolean | UsuariosCountOutputTypeArgs
  }

  export type usuariosGetPayload<
    S extends boolean | null | undefined | usuariosArgs,
    U = keyof S
      > = S extends true
        ? usuarios
    : S extends undefined
    ? never
    : S extends usuariosArgs | usuariosFindManyArgs
    ?'include' extends U
    ? usuarios  & {
    [P in TrueKeys<S['include']>]:
        P extends 'autentication' ? Array < autenticationGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'historic_usuario' ? Array < historic_usuarioGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'ussers_rol' ? Array < ussers_rolGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'log_connection' ? Array < log_connectionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsuariosCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'autentication' ? Array < autenticationGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'historic_usuario' ? Array < historic_usuarioGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'ussers_rol' ? Array < ussers_rolGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'log_connection' ? Array < log_connectionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsuariosCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof usuarios ? usuarios[P] : never
  } 
    : usuarios
  : usuarios


  type usuariosCountArgs = Merge<
    Omit<usuariosFindManyArgs, 'select' | 'include'> & {
      select?: UsuariosCountAggregateInputType | true
    }
  >

  export interface usuariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usuariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'usuarios'> extends True ? CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>> : CheckSelect<T, Prisma__usuariosClient<usuarios | null, null>, Prisma__usuariosClient<usuariosGetPayload<T> | null, null>>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usuariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'usuarios'> extends True ? CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>> : CheckSelect<T, Prisma__usuariosClient<usuarios | null, null>, Prisma__usuariosClient<usuariosGetPayload<T> | null, null>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `ID_USUARIOS`
     * const usuariosWithID_USUARIOSOnly = await prisma.usuarios.findMany({ select: { ID_USUARIOS: true } })
     * 
    **/
    findMany<T extends usuariosFindManyArgs>(
      args?: SelectSubset<T, usuariosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<usuarios>>, PrismaPromise<Array<usuariosGetPayload<T>>>>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
    **/
    create<T extends usuariosCreateArgs>(
      args: SelectSubset<T, usuariosCreateArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Create many Usuarios.
     *     @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuarios = await prisma.usuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuariosCreateManyArgs>(
      args?: SelectSubset<T, usuariosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
    **/
    delete<T extends usuariosDeleteArgs>(
      args: SelectSubset<T, usuariosDeleteArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuariosUpdateArgs>(
      args: SelectSubset<T, usuariosUpdateArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuariosDeleteManyArgs>(
      args?: SelectSubset<T, usuariosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuariosUpdateManyArgs>(
      args: SelectSubset<T, usuariosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
    **/
    upsert<T extends usuariosUpsertArgs>(
      args: SelectSubset<T, usuariosUpsertArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Find one Usuarios that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usuariosFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usuariosFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usuariosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    autentication<T extends autenticationFindManyArgs = {}>(args?: Subset<T, autenticationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<autentication>| Null>, PrismaPromise<Array<autenticationGetPayload<T>>| Null>>;

    historic_usuario<T extends historic_usuarioFindManyArgs = {}>(args?: Subset<T, historic_usuarioFindManyArgs>): CheckSelect<T, PrismaPromise<Array<historic_usuario>| Null>, PrismaPromise<Array<historic_usuarioGetPayload<T>>| Null>>;

    ussers_rol<T extends ussers_rolFindManyArgs = {}>(args?: Subset<T, ussers_rolFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ussers_rol>| Null>, PrismaPromise<Array<ussers_rolGetPayload<T>>| Null>>;

    log_connection<T extends log_connectionFindManyArgs = {}>(args?: Subset<T, log_connectionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<log_connection>| Null>, PrismaPromise<Array<log_connectionGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * usuarios base type for findUnique actions
   */
  export type usuariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     * 
    **/
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios: findUnique
   */
  export interface usuariosFindUniqueArgs extends usuariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usuarios base type for findFirst actions
   */
  export type usuariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     * 
    **/
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     * 
    **/
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     * 
    **/
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }

  /**
   * usuarios: findFirst
   */
  export interface usuariosFindFirstArgs extends usuariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     * 
    **/
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     * 
    **/
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * usuarios create
   */
  export type usuariosCreateArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * The data needed to create a usuarios.
     * 
    **/
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }


  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs = {
    /**
     * The data used to create many usuarios.
     * 
    **/
    data: Enumerable<usuariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * usuarios update
   */
  export type usuariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * The data needed to update a usuarios.
     * 
    **/
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     * 
    **/
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs = {
    /**
     * The data used to update usuarios.
     * 
    **/
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     * 
    **/
    where?: usuariosWhereInput
  }


  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     * 
    **/
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     * 
    **/
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }


  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * Filter which usuarios to delete.
     * 
    **/
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs = {
    /**
     * Filter which usuarios to delete
     * 
    **/
    where?: usuariosWhereInput
  }


  /**
   * usuarios: findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs = usuariosFindUniqueArgsBase
      

  /**
   * usuarios: findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs = usuariosFindFirstArgsBase
      

  /**
   * usuarios without action
   */
  export type usuariosArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AutenticationScalarFieldEnum: {
    ID_AUTH: 'ID_AUTH',
    ID_USUARIO: 'ID_USUARIO',
    CREDENTIAL: 'CREDENTIAL',
    HASH: 'HASH',
    STATE: 'STATE'
  };

  export type AutenticationScalarFieldEnum = (typeof AutenticationScalarFieldEnum)[keyof typeof AutenticationScalarFieldEnum]


  export const Historic_usuarioScalarFieldEnum: {
    ID_HISTORIC_USSERS: 'ID_HISTORIC_USSERS',
    ID_USUARIOS: 'ID_USUARIOS',
    PREV_DATA: 'PREV_DATA',
    CURRENT_DATA: 'CURRENT_DATA',
    DATE: 'DATE',
    IP: 'IP'
  };

  export type Historic_usuarioScalarFieldEnum = (typeof Historic_usuarioScalarFieldEnum)[keyof typeof Historic_usuarioScalarFieldEnum]


  export const Log_connectionScalarFieldEnum: {
    ID_USSERS_ROL: 'ID_USSERS_ROL',
    INITIAL_DATE: 'INITIAL_DATE',
    FINAL_DATE: 'FINAL_DATE',
    STATE: 'STATE',
    ID_USUARIOS: 'ID_USUARIOS'
  };

  export type Log_connectionScalarFieldEnum = (typeof Log_connectionScalarFieldEnum)[keyof typeof Log_connectionScalarFieldEnum]


  export const RolScalarFieldEnum: {
    ID_ROL: 'ID_ROL',
    NAME: 'NAME',
    DESCRIPTION: 'DESCRIPTION',
    STATE: 'STATE',
    CREATION_DATE: 'CREATION_DATE'
  };

  export type RolScalarFieldEnum = (typeof RolScalarFieldEnum)[keyof typeof RolScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Ussers_rolScalarFieldEnum: {
    ID_USSERS_ROL: 'ID_USSERS_ROL',
    CREATION_DATE: 'CREATION_DATE',
    STATE: 'STATE',
    ID_USUARIOS: 'ID_USUARIOS',
    ID_ROL: 'ID_ROL'
  };

  export type Ussers_rolScalarFieldEnum = (typeof Ussers_rolScalarFieldEnum)[keyof typeof Ussers_rolScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    ID_USUARIOS: 'ID_USUARIOS',
    NAME: 'NAME',
    LAST_NAME: 'LAST_NAME',
    EMAIL: 'EMAIL',
    TYPE_DOCUMENT: 'TYPE_DOCUMENT',
    DOCUMENT: 'DOCUMENT',
    STATE: 'STATE',
    CREATION_DATE: 'CREATION_DATE'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type autenticationWhereInput = {
    AND?: Enumerable<autenticationWhereInput>
    OR?: Enumerable<autenticationWhereInput>
    NOT?: Enumerable<autenticationWhereInput>
    ID_AUTH?: IntFilter | number
    ID_USUARIO?: IntFilter | number
    CREDENTIAL?: StringFilter | string
    HASH?: StringFilter | string
    STATE?: StringFilter | string
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }

  export type autenticationOrderByWithRelationInput = {
    ID_AUTH?: SortOrder
    ID_USUARIO?: SortOrder
    CREDENTIAL?: SortOrder
    HASH?: SortOrder
    STATE?: SortOrder
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type autenticationWhereUniqueInput = {
    ID_AUTH?: number
  }

  export type autenticationOrderByWithAggregationInput = {
    ID_AUTH?: SortOrder
    ID_USUARIO?: SortOrder
    CREDENTIAL?: SortOrder
    HASH?: SortOrder
    STATE?: SortOrder
    _count?: autenticationCountOrderByAggregateInput
    _avg?: autenticationAvgOrderByAggregateInput
    _max?: autenticationMaxOrderByAggregateInput
    _min?: autenticationMinOrderByAggregateInput
    _sum?: autenticationSumOrderByAggregateInput
  }

  export type autenticationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<autenticationScalarWhereWithAggregatesInput>
    OR?: Enumerable<autenticationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<autenticationScalarWhereWithAggregatesInput>
    ID_AUTH?: IntWithAggregatesFilter | number
    ID_USUARIO?: IntWithAggregatesFilter | number
    CREDENTIAL?: StringWithAggregatesFilter | string
    HASH?: StringWithAggregatesFilter | string
    STATE?: StringWithAggregatesFilter | string
  }

  export type historic_usuarioWhereInput = {
    AND?: Enumerable<historic_usuarioWhereInput>
    OR?: Enumerable<historic_usuarioWhereInput>
    NOT?: Enumerable<historic_usuarioWhereInput>
    ID_HISTORIC_USSERS?: IntFilter | number
    ID_USUARIOS?: IntFilter | number
    PREV_DATA?: StringFilter | string
    CURRENT_DATA?: StringFilter | string
    DATE?: DateTimeFilter | Date | string
    IP?: StringFilter | string
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }

  export type historic_usuarioOrderByWithRelationInput = {
    ID_HISTORIC_USSERS?: SortOrder
    ID_USUARIOS?: SortOrder
    PREV_DATA?: SortOrder
    CURRENT_DATA?: SortOrder
    DATE?: SortOrder
    IP?: SortOrder
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type historic_usuarioWhereUniqueInput = {
    ID_HISTORIC_USSERS?: number
  }

  export type historic_usuarioOrderByWithAggregationInput = {
    ID_HISTORIC_USSERS?: SortOrder
    ID_USUARIOS?: SortOrder
    PREV_DATA?: SortOrder
    CURRENT_DATA?: SortOrder
    DATE?: SortOrder
    IP?: SortOrder
    _count?: historic_usuarioCountOrderByAggregateInput
    _avg?: historic_usuarioAvgOrderByAggregateInput
    _max?: historic_usuarioMaxOrderByAggregateInput
    _min?: historic_usuarioMinOrderByAggregateInput
    _sum?: historic_usuarioSumOrderByAggregateInput
  }

  export type historic_usuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<historic_usuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<historic_usuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<historic_usuarioScalarWhereWithAggregatesInput>
    ID_HISTORIC_USSERS?: IntWithAggregatesFilter | number
    ID_USUARIOS?: IntWithAggregatesFilter | number
    PREV_DATA?: StringWithAggregatesFilter | string
    CURRENT_DATA?: StringWithAggregatesFilter | string
    DATE?: DateTimeWithAggregatesFilter | Date | string
    IP?: StringWithAggregatesFilter | string
  }

  export type rolWhereInput = {
    AND?: Enumerable<rolWhereInput>
    OR?: Enumerable<rolWhereInput>
    NOT?: Enumerable<rolWhereInput>
    ID_ROL?: IntFilter | number
    NAME?: StringFilter | string
    DESCRIPTION?: StringFilter | string
    STATE?: StringFilter | string
    CREATION_DATE?: DateTimeFilter | Date | string
    ussers_rol?: Ussers_rolListRelationFilter
  }

  export type rolOrderByWithRelationInput = {
    ID_ROL?: SortOrder
    NAME?: SortOrder
    DESCRIPTION?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
    ussers_rol?: ussers_rolOrderByRelationAggregateInput
  }

  export type rolWhereUniqueInput = {
    ID_ROL?: number
  }

  export type rolOrderByWithAggregationInput = {
    ID_ROL?: SortOrder
    NAME?: SortOrder
    DESCRIPTION?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
    _count?: rolCountOrderByAggregateInput
    _avg?: rolAvgOrderByAggregateInput
    _max?: rolMaxOrderByAggregateInput
    _min?: rolMinOrderByAggregateInput
    _sum?: rolSumOrderByAggregateInput
  }

  export type rolScalarWhereWithAggregatesInput = {
    AND?: Enumerable<rolScalarWhereWithAggregatesInput>
    OR?: Enumerable<rolScalarWhereWithAggregatesInput>
    NOT?: Enumerable<rolScalarWhereWithAggregatesInput>
    ID_ROL?: IntWithAggregatesFilter | number
    NAME?: StringWithAggregatesFilter | string
    DESCRIPTION?: StringWithAggregatesFilter | string
    STATE?: StringWithAggregatesFilter | string
    CREATION_DATE?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ussers_rolWhereInput = {
    AND?: Enumerable<ussers_rolWhereInput>
    OR?: Enumerable<ussers_rolWhereInput>
    NOT?: Enumerable<ussers_rolWhereInput>
    ID_USSERS_ROL?: IntFilter | number
    CREATION_DATE?: DateTimeFilter | Date | string
    STATE?: StringFilter | string
    ID_USUARIOS?: IntFilter | number
    ID_ROL?: IntFilter | number
    rol?: XOR<RolRelationFilter, rolWhereInput>
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }

  export type ussers_rolOrderByWithRelationInput = {
    ID_USSERS_ROL?: SortOrder
    CREATION_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
    ID_ROL?: SortOrder
    rol?: rolOrderByWithRelationInput
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type ussers_rolWhereUniqueInput = {
    ID_USSERS_ROL?: number
  }

  export type ussers_rolOrderByWithAggregationInput = {
    ID_USSERS_ROL?: SortOrder
    CREATION_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
    ID_ROL?: SortOrder
    _count?: ussers_rolCountOrderByAggregateInput
    _avg?: ussers_rolAvgOrderByAggregateInput
    _max?: ussers_rolMaxOrderByAggregateInput
    _min?: ussers_rolMinOrderByAggregateInput
    _sum?: ussers_rolSumOrderByAggregateInput
  }

  export type ussers_rolScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ussers_rolScalarWhereWithAggregatesInput>
    OR?: Enumerable<ussers_rolScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ussers_rolScalarWhereWithAggregatesInput>
    ID_USSERS_ROL?: IntWithAggregatesFilter | number
    CREATION_DATE?: DateTimeWithAggregatesFilter | Date | string
    STATE?: StringWithAggregatesFilter | string
    ID_USUARIOS?: IntWithAggregatesFilter | number
    ID_ROL?: IntWithAggregatesFilter | number
  }

  export type log_connectionWhereInput = {
    AND?: Enumerable<log_connectionWhereInput>
    OR?: Enumerable<log_connectionWhereInput>
    NOT?: Enumerable<log_connectionWhereInput>
    ID_USSERS_ROL?: IntFilter | number
    INITIAL_DATE?: DateTimeFilter | Date | string
    FINAL_DATE?: DateTimeFilter | Date | string
    STATE?: StringFilter | string
    ID_USUARIOS?: IntFilter | number
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }

  export type log_connectionOrderByWithRelationInput = {
    ID_USSERS_ROL?: SortOrder
    INITIAL_DATE?: SortOrder
    FINAL_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type log_connectionWhereUniqueInput = {
    ID_USSERS_ROL?: number
  }

  export type log_connectionOrderByWithAggregationInput = {
    ID_USSERS_ROL?: SortOrder
    INITIAL_DATE?: SortOrder
    FINAL_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
    _count?: log_connectionCountOrderByAggregateInput
    _avg?: log_connectionAvgOrderByAggregateInput
    _max?: log_connectionMaxOrderByAggregateInput
    _min?: log_connectionMinOrderByAggregateInput
    _sum?: log_connectionSumOrderByAggregateInput
  }

  export type log_connectionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<log_connectionScalarWhereWithAggregatesInput>
    OR?: Enumerable<log_connectionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<log_connectionScalarWhereWithAggregatesInput>
    ID_USSERS_ROL?: IntWithAggregatesFilter | number
    INITIAL_DATE?: DateTimeWithAggregatesFilter | Date | string
    FINAL_DATE?: DateTimeWithAggregatesFilter | Date | string
    STATE?: StringWithAggregatesFilter | string
    ID_USUARIOS?: IntWithAggregatesFilter | number
  }

  export type usuariosWhereInput = {
    AND?: Enumerable<usuariosWhereInput>
    OR?: Enumerable<usuariosWhereInput>
    NOT?: Enumerable<usuariosWhereInput>
    ID_USUARIOS?: IntFilter | number
    NAME?: StringFilter | string
    LAST_NAME?: StringFilter | string
    EMAIL?: StringFilter | string
    TYPE_DOCUMENT?: StringFilter | string
    DOCUMENT?: StringFilter | string
    STATE?: StringFilter | string
    CREATION_DATE?: DateTimeFilter | Date | string
    autentication?: AutenticationListRelationFilter
    historic_usuario?: Historic_usuarioListRelationFilter
    ussers_rol?: Ussers_rolListRelationFilter
    log_connection?: Log_connectionListRelationFilter
  }

  export type usuariosOrderByWithRelationInput = {
    ID_USUARIOS?: SortOrder
    NAME?: SortOrder
    LAST_NAME?: SortOrder
    EMAIL?: SortOrder
    TYPE_DOCUMENT?: SortOrder
    DOCUMENT?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
    autentication?: autenticationOrderByRelationAggregateInput
    historic_usuario?: historic_usuarioOrderByRelationAggregateInput
    ussers_rol?: ussers_rolOrderByRelationAggregateInput
    log_connection?: log_connectionOrderByRelationAggregateInput
  }

  export type usuariosWhereUniqueInput = {
    ID_USUARIOS?: number
  }

  export type usuariosOrderByWithAggregationInput = {
    ID_USUARIOS?: SortOrder
    NAME?: SortOrder
    LAST_NAME?: SortOrder
    EMAIL?: SortOrder
    TYPE_DOCUMENT?: SortOrder
    DOCUMENT?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    ID_USUARIOS?: IntWithAggregatesFilter | number
    NAME?: StringWithAggregatesFilter | string
    LAST_NAME?: StringWithAggregatesFilter | string
    EMAIL?: StringWithAggregatesFilter | string
    TYPE_DOCUMENT?: StringWithAggregatesFilter | string
    DOCUMENT?: StringWithAggregatesFilter | string
    STATE?: StringWithAggregatesFilter | string
    CREATION_DATE?: DateTimeWithAggregatesFilter | Date | string
  }

  export type autenticationCreateInput = {
    CREDENTIAL: string
    HASH: string
    STATE: string
    usuarios: usuariosCreateNestedOneWithoutAutenticationInput
  }

  export type autenticationUncheckedCreateInput = {
    ID_AUTH?: number
    ID_USUARIO: number
    CREDENTIAL: string
    HASH: string
    STATE: string
  }

  export type autenticationUpdateInput = {
    CREDENTIAL?: StringFieldUpdateOperationsInput | string
    HASH?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    usuarios?: usuariosUpdateOneRequiredWithoutAutenticationNestedInput
  }

  export type autenticationUncheckedUpdateInput = {
    ID_AUTH?: IntFieldUpdateOperationsInput | number
    ID_USUARIO?: IntFieldUpdateOperationsInput | number
    CREDENTIAL?: StringFieldUpdateOperationsInput | string
    HASH?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type autenticationCreateManyInput = {
    ID_AUTH?: number
    ID_USUARIO: number
    CREDENTIAL: string
    HASH: string
    STATE: string
  }

  export type autenticationUpdateManyMutationInput = {
    CREDENTIAL?: StringFieldUpdateOperationsInput | string
    HASH?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type autenticationUncheckedUpdateManyInput = {
    ID_AUTH?: IntFieldUpdateOperationsInput | number
    ID_USUARIO?: IntFieldUpdateOperationsInput | number
    CREDENTIAL?: StringFieldUpdateOperationsInput | string
    HASH?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type historic_usuarioCreateInput = {
    PREV_DATA: string
    CURRENT_DATA: string
    DATE: Date | string
    IP: string
    usuarios: usuariosCreateNestedOneWithoutHistoric_usuarioInput
  }

  export type historic_usuarioUncheckedCreateInput = {
    ID_HISTORIC_USSERS?: number
    ID_USUARIOS: number
    PREV_DATA: string
    CURRENT_DATA: string
    DATE: Date | string
    IP: string
  }

  export type historic_usuarioUpdateInput = {
    PREV_DATA?: StringFieldUpdateOperationsInput | string
    CURRENT_DATA?: StringFieldUpdateOperationsInput | string
    DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    IP?: StringFieldUpdateOperationsInput | string
    usuarios?: usuariosUpdateOneRequiredWithoutHistoric_usuarioNestedInput
  }

  export type historic_usuarioUncheckedUpdateInput = {
    ID_HISTORIC_USSERS?: IntFieldUpdateOperationsInput | number
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    PREV_DATA?: StringFieldUpdateOperationsInput | string
    CURRENT_DATA?: StringFieldUpdateOperationsInput | string
    DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    IP?: StringFieldUpdateOperationsInput | string
  }

  export type historic_usuarioCreateManyInput = {
    ID_HISTORIC_USSERS?: number
    ID_USUARIOS: number
    PREV_DATA: string
    CURRENT_DATA: string
    DATE: Date | string
    IP: string
  }

  export type historic_usuarioUpdateManyMutationInput = {
    PREV_DATA?: StringFieldUpdateOperationsInput | string
    CURRENT_DATA?: StringFieldUpdateOperationsInput | string
    DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    IP?: StringFieldUpdateOperationsInput | string
  }

  export type historic_usuarioUncheckedUpdateManyInput = {
    ID_HISTORIC_USSERS?: IntFieldUpdateOperationsInput | number
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    PREV_DATA?: StringFieldUpdateOperationsInput | string
    CURRENT_DATA?: StringFieldUpdateOperationsInput | string
    DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    IP?: StringFieldUpdateOperationsInput | string
  }

  export type rolCreateInput = {
    NAME: string
    DESCRIPTION: string
    STATE: string
    CREATION_DATE: Date | string
    ussers_rol?: ussers_rolCreateNestedManyWithoutRolInput
  }

  export type rolUncheckedCreateInput = {
    ID_ROL?: number
    NAME: string
    DESCRIPTION: string
    STATE: string
    CREATION_DATE: Date | string
    ussers_rol?: ussers_rolUncheckedCreateNestedManyWithoutRolInput
  }

  export type rolUpdateInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    DESCRIPTION?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    ussers_rol?: ussers_rolUpdateManyWithoutRolNestedInput
  }

  export type rolUncheckedUpdateInput = {
    ID_ROL?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    DESCRIPTION?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    ussers_rol?: ussers_rolUncheckedUpdateManyWithoutRolNestedInput
  }

  export type rolCreateManyInput = {
    ID_ROL?: number
    NAME: string
    DESCRIPTION: string
    STATE: string
    CREATION_DATE: Date | string
  }

  export type rolUpdateManyMutationInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    DESCRIPTION?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rolUncheckedUpdateManyInput = {
    ID_ROL?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    DESCRIPTION?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ussers_rolCreateInput = {
    CREATION_DATE: Date | string
    STATE: string
    rol: rolCreateNestedOneWithoutUssers_rolInput
    usuarios: usuariosCreateNestedOneWithoutUssers_rolInput
  }

  export type ussers_rolUncheckedCreateInput = {
    ID_USSERS_ROL?: number
    CREATION_DATE: Date | string
    STATE: string
    ID_USUARIOS: number
    ID_ROL: number
  }

  export type ussers_rolUpdateInput = {
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    rol?: rolUpdateOneRequiredWithoutUssers_rolNestedInput
    usuarios?: usuariosUpdateOneRequiredWithoutUssers_rolNestedInput
  }

  export type ussers_rolUncheckedUpdateInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    ID_ROL?: IntFieldUpdateOperationsInput | number
  }

  export type ussers_rolCreateManyInput = {
    ID_USSERS_ROL?: number
    CREATION_DATE: Date | string
    STATE: string
    ID_USUARIOS: number
    ID_ROL: number
  }

  export type ussers_rolUpdateManyMutationInput = {
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type ussers_rolUncheckedUpdateManyInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    ID_ROL?: IntFieldUpdateOperationsInput | number
  }

  export type log_connectionCreateInput = {
    INITIAL_DATE: Date | string
    FINAL_DATE: Date | string
    STATE: string
    usuarios: usuariosCreateNestedOneWithoutLog_connectionInput
  }

  export type log_connectionUncheckedCreateInput = {
    ID_USSERS_ROL?: number
    INITIAL_DATE: Date | string
    FINAL_DATE: Date | string
    STATE: string
    ID_USUARIOS: number
  }

  export type log_connectionUpdateInput = {
    INITIAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    FINAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    usuarios?: usuariosUpdateOneRequiredWithoutLog_connectionNestedInput
  }

  export type log_connectionUncheckedUpdateInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    INITIAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    FINAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
  }

  export type log_connectionCreateManyInput = {
    ID_USSERS_ROL?: number
    INITIAL_DATE: Date | string
    FINAL_DATE: Date | string
    STATE: string
    ID_USUARIOS: number
  }

  export type log_connectionUpdateManyMutationInput = {
    INITIAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    FINAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type log_connectionUncheckedUpdateManyInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    INITIAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    FINAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
  }

  export type usuariosCreateInput = {
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    autentication?: autenticationCreateNestedManyWithoutUsuariosInput
    historic_usuario?: historic_usuarioCreateNestedManyWithoutUsuariosInput
    ussers_rol?: ussers_rolCreateNestedManyWithoutUsuariosInput
    log_connection?: log_connectionCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateInput = {
    ID_USUARIOS?: number
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    autentication?: autenticationUncheckedCreateNestedManyWithoutUsuariosInput
    historic_usuario?: historic_usuarioUncheckedCreateNestedManyWithoutUsuariosInput
    ussers_rol?: ussers_rolUncheckedCreateNestedManyWithoutUsuariosInput
    log_connection?: log_connectionUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUpdateInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    autentication?: autenticationUpdateManyWithoutUsuariosNestedInput
    historic_usuario?: historic_usuarioUpdateManyWithoutUsuariosNestedInput
    ussers_rol?: ussers_rolUpdateManyWithoutUsuariosNestedInput
    log_connection?: log_connectionUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateInput = {
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    autentication?: autenticationUncheckedUpdateManyWithoutUsuariosNestedInput
    historic_usuario?: historic_usuarioUncheckedUpdateManyWithoutUsuariosNestedInput
    ussers_rol?: ussers_rolUncheckedUpdateManyWithoutUsuariosNestedInput
    log_connection?: log_connectionUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosCreateManyInput = {
    ID_USUARIOS?: number
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
  }

  export type usuariosUpdateManyMutationInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usuariosUncheckedUpdateManyInput = {
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UsuariosRelationFilter = {
    is?: usuariosWhereInput
    isNot?: usuariosWhereInput
  }

  export type autenticationCountOrderByAggregateInput = {
    ID_AUTH?: SortOrder
    ID_USUARIO?: SortOrder
    CREDENTIAL?: SortOrder
    HASH?: SortOrder
    STATE?: SortOrder
  }

  export type autenticationAvgOrderByAggregateInput = {
    ID_AUTH?: SortOrder
    ID_USUARIO?: SortOrder
  }

  export type autenticationMaxOrderByAggregateInput = {
    ID_AUTH?: SortOrder
    ID_USUARIO?: SortOrder
    CREDENTIAL?: SortOrder
    HASH?: SortOrder
    STATE?: SortOrder
  }

  export type autenticationMinOrderByAggregateInput = {
    ID_AUTH?: SortOrder
    ID_USUARIO?: SortOrder
    CREDENTIAL?: SortOrder
    HASH?: SortOrder
    STATE?: SortOrder
  }

  export type autenticationSumOrderByAggregateInput = {
    ID_AUTH?: SortOrder
    ID_USUARIO?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type historic_usuarioCountOrderByAggregateInput = {
    ID_HISTORIC_USSERS?: SortOrder
    ID_USUARIOS?: SortOrder
    PREV_DATA?: SortOrder
    CURRENT_DATA?: SortOrder
    DATE?: SortOrder
    IP?: SortOrder
  }

  export type historic_usuarioAvgOrderByAggregateInput = {
    ID_HISTORIC_USSERS?: SortOrder
    ID_USUARIOS?: SortOrder
  }

  export type historic_usuarioMaxOrderByAggregateInput = {
    ID_HISTORIC_USSERS?: SortOrder
    ID_USUARIOS?: SortOrder
    PREV_DATA?: SortOrder
    CURRENT_DATA?: SortOrder
    DATE?: SortOrder
    IP?: SortOrder
  }

  export type historic_usuarioMinOrderByAggregateInput = {
    ID_HISTORIC_USSERS?: SortOrder
    ID_USUARIOS?: SortOrder
    PREV_DATA?: SortOrder
    CURRENT_DATA?: SortOrder
    DATE?: SortOrder
    IP?: SortOrder
  }

  export type historic_usuarioSumOrderByAggregateInput = {
    ID_HISTORIC_USSERS?: SortOrder
    ID_USUARIOS?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type Ussers_rolListRelationFilter = {
    every?: ussers_rolWhereInput
    some?: ussers_rolWhereInput
    none?: ussers_rolWhereInput
  }

  export type ussers_rolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rolCountOrderByAggregateInput = {
    ID_ROL?: SortOrder
    NAME?: SortOrder
    DESCRIPTION?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
  }

  export type rolAvgOrderByAggregateInput = {
    ID_ROL?: SortOrder
  }

  export type rolMaxOrderByAggregateInput = {
    ID_ROL?: SortOrder
    NAME?: SortOrder
    DESCRIPTION?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
  }

  export type rolMinOrderByAggregateInput = {
    ID_ROL?: SortOrder
    NAME?: SortOrder
    DESCRIPTION?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
  }

  export type rolSumOrderByAggregateInput = {
    ID_ROL?: SortOrder
  }

  export type RolRelationFilter = {
    is?: rolWhereInput
    isNot?: rolWhereInput
  }

  export type ussers_rolCountOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    CREATION_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
    ID_ROL?: SortOrder
  }

  export type ussers_rolAvgOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    ID_USUARIOS?: SortOrder
    ID_ROL?: SortOrder
  }

  export type ussers_rolMaxOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    CREATION_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
    ID_ROL?: SortOrder
  }

  export type ussers_rolMinOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    CREATION_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
    ID_ROL?: SortOrder
  }

  export type ussers_rolSumOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    ID_USUARIOS?: SortOrder
    ID_ROL?: SortOrder
  }

  export type log_connectionCountOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    INITIAL_DATE?: SortOrder
    FINAL_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
  }

  export type log_connectionAvgOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    ID_USUARIOS?: SortOrder
  }

  export type log_connectionMaxOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    INITIAL_DATE?: SortOrder
    FINAL_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
  }

  export type log_connectionMinOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    INITIAL_DATE?: SortOrder
    FINAL_DATE?: SortOrder
    STATE?: SortOrder
    ID_USUARIOS?: SortOrder
  }

  export type log_connectionSumOrderByAggregateInput = {
    ID_USSERS_ROL?: SortOrder
    ID_USUARIOS?: SortOrder
  }

  export type AutenticationListRelationFilter = {
    every?: autenticationWhereInput
    some?: autenticationWhereInput
    none?: autenticationWhereInput
  }

  export type Historic_usuarioListRelationFilter = {
    every?: historic_usuarioWhereInput
    some?: historic_usuarioWhereInput
    none?: historic_usuarioWhereInput
  }

  export type Log_connectionListRelationFilter = {
    every?: log_connectionWhereInput
    some?: log_connectionWhereInput
    none?: log_connectionWhereInput
  }

  export type autenticationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type historic_usuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type log_connectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuariosCountOrderByAggregateInput = {
    ID_USUARIOS?: SortOrder
    NAME?: SortOrder
    LAST_NAME?: SortOrder
    EMAIL?: SortOrder
    TYPE_DOCUMENT?: SortOrder
    DOCUMENT?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    ID_USUARIOS?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    ID_USUARIOS?: SortOrder
    NAME?: SortOrder
    LAST_NAME?: SortOrder
    EMAIL?: SortOrder
    TYPE_DOCUMENT?: SortOrder
    DOCUMENT?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    ID_USUARIOS?: SortOrder
    NAME?: SortOrder
    LAST_NAME?: SortOrder
    EMAIL?: SortOrder
    TYPE_DOCUMENT?: SortOrder
    DOCUMENT?: SortOrder
    STATE?: SortOrder
    CREATION_DATE?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    ID_USUARIOS?: SortOrder
  }

  export type usuariosCreateNestedOneWithoutAutenticationInput = {
    create?: XOR<usuariosCreateWithoutAutenticationInput, usuariosUncheckedCreateWithoutAutenticationInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutAutenticationInput
    connect?: usuariosWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type usuariosUpdateOneRequiredWithoutAutenticationNestedInput = {
    create?: XOR<usuariosCreateWithoutAutenticationInput, usuariosUncheckedCreateWithoutAutenticationInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutAutenticationInput
    upsert?: usuariosUpsertWithoutAutenticationInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<usuariosUpdateWithoutAutenticationInput, usuariosUncheckedUpdateWithoutAutenticationInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usuariosCreateNestedOneWithoutHistoric_usuarioInput = {
    create?: XOR<usuariosCreateWithoutHistoric_usuarioInput, usuariosUncheckedCreateWithoutHistoric_usuarioInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutHistoric_usuarioInput
    connect?: usuariosWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usuariosUpdateOneRequiredWithoutHistoric_usuarioNestedInput = {
    create?: XOR<usuariosCreateWithoutHistoric_usuarioInput, usuariosUncheckedCreateWithoutHistoric_usuarioInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutHistoric_usuarioInput
    upsert?: usuariosUpsertWithoutHistoric_usuarioInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<usuariosUpdateWithoutHistoric_usuarioInput, usuariosUncheckedUpdateWithoutHistoric_usuarioInput>
  }

  export type ussers_rolCreateNestedManyWithoutRolInput = {
    create?: XOR<Enumerable<ussers_rolCreateWithoutRolInput>, Enumerable<ussers_rolUncheckedCreateWithoutRolInput>>
    connectOrCreate?: Enumerable<ussers_rolCreateOrConnectWithoutRolInput>
    createMany?: ussers_rolCreateManyRolInputEnvelope
    connect?: Enumerable<ussers_rolWhereUniqueInput>
  }

  export type ussers_rolUncheckedCreateNestedManyWithoutRolInput = {
    create?: XOR<Enumerable<ussers_rolCreateWithoutRolInput>, Enumerable<ussers_rolUncheckedCreateWithoutRolInput>>
    connectOrCreate?: Enumerable<ussers_rolCreateOrConnectWithoutRolInput>
    createMany?: ussers_rolCreateManyRolInputEnvelope
    connect?: Enumerable<ussers_rolWhereUniqueInput>
  }

  export type ussers_rolUpdateManyWithoutRolNestedInput = {
    create?: XOR<Enumerable<ussers_rolCreateWithoutRolInput>, Enumerable<ussers_rolUncheckedCreateWithoutRolInput>>
    connectOrCreate?: Enumerable<ussers_rolCreateOrConnectWithoutRolInput>
    upsert?: Enumerable<ussers_rolUpsertWithWhereUniqueWithoutRolInput>
    createMany?: ussers_rolCreateManyRolInputEnvelope
    set?: Enumerable<ussers_rolWhereUniqueInput>
    disconnect?: Enumerable<ussers_rolWhereUniqueInput>
    delete?: Enumerable<ussers_rolWhereUniqueInput>
    connect?: Enumerable<ussers_rolWhereUniqueInput>
    update?: Enumerable<ussers_rolUpdateWithWhereUniqueWithoutRolInput>
    updateMany?: Enumerable<ussers_rolUpdateManyWithWhereWithoutRolInput>
    deleteMany?: Enumerable<ussers_rolScalarWhereInput>
  }

  export type ussers_rolUncheckedUpdateManyWithoutRolNestedInput = {
    create?: XOR<Enumerable<ussers_rolCreateWithoutRolInput>, Enumerable<ussers_rolUncheckedCreateWithoutRolInput>>
    connectOrCreate?: Enumerable<ussers_rolCreateOrConnectWithoutRolInput>
    upsert?: Enumerable<ussers_rolUpsertWithWhereUniqueWithoutRolInput>
    createMany?: ussers_rolCreateManyRolInputEnvelope
    set?: Enumerable<ussers_rolWhereUniqueInput>
    disconnect?: Enumerable<ussers_rolWhereUniqueInput>
    delete?: Enumerable<ussers_rolWhereUniqueInput>
    connect?: Enumerable<ussers_rolWhereUniqueInput>
    update?: Enumerable<ussers_rolUpdateWithWhereUniqueWithoutRolInput>
    updateMany?: Enumerable<ussers_rolUpdateManyWithWhereWithoutRolInput>
    deleteMany?: Enumerable<ussers_rolScalarWhereInput>
  }

  export type rolCreateNestedOneWithoutUssers_rolInput = {
    create?: XOR<rolCreateWithoutUssers_rolInput, rolUncheckedCreateWithoutUssers_rolInput>
    connectOrCreate?: rolCreateOrConnectWithoutUssers_rolInput
    connect?: rolWhereUniqueInput
  }

  export type usuariosCreateNestedOneWithoutUssers_rolInput = {
    create?: XOR<usuariosCreateWithoutUssers_rolInput, usuariosUncheckedCreateWithoutUssers_rolInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutUssers_rolInput
    connect?: usuariosWhereUniqueInput
  }

  export type rolUpdateOneRequiredWithoutUssers_rolNestedInput = {
    create?: XOR<rolCreateWithoutUssers_rolInput, rolUncheckedCreateWithoutUssers_rolInput>
    connectOrCreate?: rolCreateOrConnectWithoutUssers_rolInput
    upsert?: rolUpsertWithoutUssers_rolInput
    connect?: rolWhereUniqueInput
    update?: XOR<rolUpdateWithoutUssers_rolInput, rolUncheckedUpdateWithoutUssers_rolInput>
  }

  export type usuariosUpdateOneRequiredWithoutUssers_rolNestedInput = {
    create?: XOR<usuariosCreateWithoutUssers_rolInput, usuariosUncheckedCreateWithoutUssers_rolInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutUssers_rolInput
    upsert?: usuariosUpsertWithoutUssers_rolInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<usuariosUpdateWithoutUssers_rolInput, usuariosUncheckedUpdateWithoutUssers_rolInput>
  }

  export type usuariosCreateNestedOneWithoutLog_connectionInput = {
    create?: XOR<usuariosCreateWithoutLog_connectionInput, usuariosUncheckedCreateWithoutLog_connectionInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutLog_connectionInput
    connect?: usuariosWhereUniqueInput
  }

  export type usuariosUpdateOneRequiredWithoutLog_connectionNestedInput = {
    create?: XOR<usuariosCreateWithoutLog_connectionInput, usuariosUncheckedCreateWithoutLog_connectionInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutLog_connectionInput
    upsert?: usuariosUpsertWithoutLog_connectionInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<usuariosUpdateWithoutLog_connectionInput, usuariosUncheckedUpdateWithoutLog_connectionInput>
  }

  export type autenticationCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<autenticationCreateWithoutUsuariosInput>, Enumerable<autenticationUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<autenticationCreateOrConnectWithoutUsuariosInput>
    createMany?: autenticationCreateManyUsuariosInputEnvelope
    connect?: Enumerable<autenticationWhereUniqueInput>
  }

  export type historic_usuarioCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<historic_usuarioCreateWithoutUsuariosInput>, Enumerable<historic_usuarioUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<historic_usuarioCreateOrConnectWithoutUsuariosInput>
    createMany?: historic_usuarioCreateManyUsuariosInputEnvelope
    connect?: Enumerable<historic_usuarioWhereUniqueInput>
  }

  export type ussers_rolCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<ussers_rolCreateWithoutUsuariosInput>, Enumerable<ussers_rolUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<ussers_rolCreateOrConnectWithoutUsuariosInput>
    createMany?: ussers_rolCreateManyUsuariosInputEnvelope
    connect?: Enumerable<ussers_rolWhereUniqueInput>
  }

  export type log_connectionCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<log_connectionCreateWithoutUsuariosInput>, Enumerable<log_connectionUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<log_connectionCreateOrConnectWithoutUsuariosInput>
    createMany?: log_connectionCreateManyUsuariosInputEnvelope
    connect?: Enumerable<log_connectionWhereUniqueInput>
  }

  export type autenticationUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<autenticationCreateWithoutUsuariosInput>, Enumerable<autenticationUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<autenticationCreateOrConnectWithoutUsuariosInput>
    createMany?: autenticationCreateManyUsuariosInputEnvelope
    connect?: Enumerable<autenticationWhereUniqueInput>
  }

  export type historic_usuarioUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<historic_usuarioCreateWithoutUsuariosInput>, Enumerable<historic_usuarioUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<historic_usuarioCreateOrConnectWithoutUsuariosInput>
    createMany?: historic_usuarioCreateManyUsuariosInputEnvelope
    connect?: Enumerable<historic_usuarioWhereUniqueInput>
  }

  export type ussers_rolUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<ussers_rolCreateWithoutUsuariosInput>, Enumerable<ussers_rolUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<ussers_rolCreateOrConnectWithoutUsuariosInput>
    createMany?: ussers_rolCreateManyUsuariosInputEnvelope
    connect?: Enumerable<ussers_rolWhereUniqueInput>
  }

  export type log_connectionUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<log_connectionCreateWithoutUsuariosInput>, Enumerable<log_connectionUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<log_connectionCreateOrConnectWithoutUsuariosInput>
    createMany?: log_connectionCreateManyUsuariosInputEnvelope
    connect?: Enumerable<log_connectionWhereUniqueInput>
  }

  export type autenticationUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<autenticationCreateWithoutUsuariosInput>, Enumerable<autenticationUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<autenticationCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<autenticationUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: autenticationCreateManyUsuariosInputEnvelope
    set?: Enumerable<autenticationWhereUniqueInput>
    disconnect?: Enumerable<autenticationWhereUniqueInput>
    delete?: Enumerable<autenticationWhereUniqueInput>
    connect?: Enumerable<autenticationWhereUniqueInput>
    update?: Enumerable<autenticationUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<autenticationUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<autenticationScalarWhereInput>
  }

  export type historic_usuarioUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<historic_usuarioCreateWithoutUsuariosInput>, Enumerable<historic_usuarioUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<historic_usuarioCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<historic_usuarioUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: historic_usuarioCreateManyUsuariosInputEnvelope
    set?: Enumerable<historic_usuarioWhereUniqueInput>
    disconnect?: Enumerable<historic_usuarioWhereUniqueInput>
    delete?: Enumerable<historic_usuarioWhereUniqueInput>
    connect?: Enumerable<historic_usuarioWhereUniqueInput>
    update?: Enumerable<historic_usuarioUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<historic_usuarioUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<historic_usuarioScalarWhereInput>
  }

  export type ussers_rolUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<ussers_rolCreateWithoutUsuariosInput>, Enumerable<ussers_rolUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<ussers_rolCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<ussers_rolUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: ussers_rolCreateManyUsuariosInputEnvelope
    set?: Enumerable<ussers_rolWhereUniqueInput>
    disconnect?: Enumerable<ussers_rolWhereUniqueInput>
    delete?: Enumerable<ussers_rolWhereUniqueInput>
    connect?: Enumerable<ussers_rolWhereUniqueInput>
    update?: Enumerable<ussers_rolUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<ussers_rolUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<ussers_rolScalarWhereInput>
  }

  export type log_connectionUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<log_connectionCreateWithoutUsuariosInput>, Enumerable<log_connectionUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<log_connectionCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<log_connectionUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: log_connectionCreateManyUsuariosInputEnvelope
    set?: Enumerable<log_connectionWhereUniqueInput>
    disconnect?: Enumerable<log_connectionWhereUniqueInput>
    delete?: Enumerable<log_connectionWhereUniqueInput>
    connect?: Enumerable<log_connectionWhereUniqueInput>
    update?: Enumerable<log_connectionUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<log_connectionUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<log_connectionScalarWhereInput>
  }

  export type autenticationUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<autenticationCreateWithoutUsuariosInput>, Enumerable<autenticationUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<autenticationCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<autenticationUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: autenticationCreateManyUsuariosInputEnvelope
    set?: Enumerable<autenticationWhereUniqueInput>
    disconnect?: Enumerable<autenticationWhereUniqueInput>
    delete?: Enumerable<autenticationWhereUniqueInput>
    connect?: Enumerable<autenticationWhereUniqueInput>
    update?: Enumerable<autenticationUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<autenticationUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<autenticationScalarWhereInput>
  }

  export type historic_usuarioUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<historic_usuarioCreateWithoutUsuariosInput>, Enumerable<historic_usuarioUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<historic_usuarioCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<historic_usuarioUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: historic_usuarioCreateManyUsuariosInputEnvelope
    set?: Enumerable<historic_usuarioWhereUniqueInput>
    disconnect?: Enumerable<historic_usuarioWhereUniqueInput>
    delete?: Enumerable<historic_usuarioWhereUniqueInput>
    connect?: Enumerable<historic_usuarioWhereUniqueInput>
    update?: Enumerable<historic_usuarioUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<historic_usuarioUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<historic_usuarioScalarWhereInput>
  }

  export type ussers_rolUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<ussers_rolCreateWithoutUsuariosInput>, Enumerable<ussers_rolUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<ussers_rolCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<ussers_rolUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: ussers_rolCreateManyUsuariosInputEnvelope
    set?: Enumerable<ussers_rolWhereUniqueInput>
    disconnect?: Enumerable<ussers_rolWhereUniqueInput>
    delete?: Enumerable<ussers_rolWhereUniqueInput>
    connect?: Enumerable<ussers_rolWhereUniqueInput>
    update?: Enumerable<ussers_rolUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<ussers_rolUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<ussers_rolScalarWhereInput>
  }

  export type log_connectionUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<log_connectionCreateWithoutUsuariosInput>, Enumerable<log_connectionUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<log_connectionCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<log_connectionUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: log_connectionCreateManyUsuariosInputEnvelope
    set?: Enumerable<log_connectionWhereUniqueInput>
    disconnect?: Enumerable<log_connectionWhereUniqueInput>
    delete?: Enumerable<log_connectionWhereUniqueInput>
    connect?: Enumerable<log_connectionWhereUniqueInput>
    update?: Enumerable<log_connectionUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<log_connectionUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<log_connectionScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type usuariosCreateWithoutAutenticationInput = {
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    historic_usuario?: historic_usuarioCreateNestedManyWithoutUsuariosInput
    ussers_rol?: ussers_rolCreateNestedManyWithoutUsuariosInput
    log_connection?: log_connectionCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutAutenticationInput = {
    ID_USUARIOS?: number
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    historic_usuario?: historic_usuarioUncheckedCreateNestedManyWithoutUsuariosInput
    ussers_rol?: ussers_rolUncheckedCreateNestedManyWithoutUsuariosInput
    log_connection?: log_connectionUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutAutenticationInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutAutenticationInput, usuariosUncheckedCreateWithoutAutenticationInput>
  }

  export type usuariosUpsertWithoutAutenticationInput = {
    update: XOR<usuariosUpdateWithoutAutenticationInput, usuariosUncheckedUpdateWithoutAutenticationInput>
    create: XOR<usuariosCreateWithoutAutenticationInput, usuariosUncheckedCreateWithoutAutenticationInput>
  }

  export type usuariosUpdateWithoutAutenticationInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    historic_usuario?: historic_usuarioUpdateManyWithoutUsuariosNestedInput
    ussers_rol?: ussers_rolUpdateManyWithoutUsuariosNestedInput
    log_connection?: log_connectionUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutAutenticationInput = {
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    historic_usuario?: historic_usuarioUncheckedUpdateManyWithoutUsuariosNestedInput
    ussers_rol?: ussers_rolUncheckedUpdateManyWithoutUsuariosNestedInput
    log_connection?: log_connectionUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosCreateWithoutHistoric_usuarioInput = {
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    autentication?: autenticationCreateNestedManyWithoutUsuariosInput
    ussers_rol?: ussers_rolCreateNestedManyWithoutUsuariosInput
    log_connection?: log_connectionCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutHistoric_usuarioInput = {
    ID_USUARIOS?: number
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    autentication?: autenticationUncheckedCreateNestedManyWithoutUsuariosInput
    ussers_rol?: ussers_rolUncheckedCreateNestedManyWithoutUsuariosInput
    log_connection?: log_connectionUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutHistoric_usuarioInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutHistoric_usuarioInput, usuariosUncheckedCreateWithoutHistoric_usuarioInput>
  }

  export type usuariosUpsertWithoutHistoric_usuarioInput = {
    update: XOR<usuariosUpdateWithoutHistoric_usuarioInput, usuariosUncheckedUpdateWithoutHistoric_usuarioInput>
    create: XOR<usuariosCreateWithoutHistoric_usuarioInput, usuariosUncheckedCreateWithoutHistoric_usuarioInput>
  }

  export type usuariosUpdateWithoutHistoric_usuarioInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    autentication?: autenticationUpdateManyWithoutUsuariosNestedInput
    ussers_rol?: ussers_rolUpdateManyWithoutUsuariosNestedInput
    log_connection?: log_connectionUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutHistoric_usuarioInput = {
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    autentication?: autenticationUncheckedUpdateManyWithoutUsuariosNestedInput
    ussers_rol?: ussers_rolUncheckedUpdateManyWithoutUsuariosNestedInput
    log_connection?: log_connectionUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type ussers_rolCreateWithoutRolInput = {
    CREATION_DATE: Date | string
    STATE: string
    usuarios: usuariosCreateNestedOneWithoutUssers_rolInput
  }

  export type ussers_rolUncheckedCreateWithoutRolInput = {
    ID_USSERS_ROL?: number
    CREATION_DATE: Date | string
    STATE: string
    ID_USUARIOS: number
  }

  export type ussers_rolCreateOrConnectWithoutRolInput = {
    where: ussers_rolWhereUniqueInput
    create: XOR<ussers_rolCreateWithoutRolInput, ussers_rolUncheckedCreateWithoutRolInput>
  }

  export type ussers_rolCreateManyRolInputEnvelope = {
    data: Enumerable<ussers_rolCreateManyRolInput>
    skipDuplicates?: boolean
  }

  export type ussers_rolUpsertWithWhereUniqueWithoutRolInput = {
    where: ussers_rolWhereUniqueInput
    update: XOR<ussers_rolUpdateWithoutRolInput, ussers_rolUncheckedUpdateWithoutRolInput>
    create: XOR<ussers_rolCreateWithoutRolInput, ussers_rolUncheckedCreateWithoutRolInput>
  }

  export type ussers_rolUpdateWithWhereUniqueWithoutRolInput = {
    where: ussers_rolWhereUniqueInput
    data: XOR<ussers_rolUpdateWithoutRolInput, ussers_rolUncheckedUpdateWithoutRolInput>
  }

  export type ussers_rolUpdateManyWithWhereWithoutRolInput = {
    where: ussers_rolScalarWhereInput
    data: XOR<ussers_rolUpdateManyMutationInput, ussers_rolUncheckedUpdateManyWithoutUssers_rolInput>
  }

  export type ussers_rolScalarWhereInput = {
    AND?: Enumerable<ussers_rolScalarWhereInput>
    OR?: Enumerable<ussers_rolScalarWhereInput>
    NOT?: Enumerable<ussers_rolScalarWhereInput>
    ID_USSERS_ROL?: IntFilter | number
    CREATION_DATE?: DateTimeFilter | Date | string
    STATE?: StringFilter | string
    ID_USUARIOS?: IntFilter | number
    ID_ROL?: IntFilter | number
  }

  export type rolCreateWithoutUssers_rolInput = {
    NAME: string
    DESCRIPTION: string
    STATE: string
    CREATION_DATE: Date | string
  }

  export type rolUncheckedCreateWithoutUssers_rolInput = {
    ID_ROL?: number
    NAME: string
    DESCRIPTION: string
    STATE: string
    CREATION_DATE: Date | string
  }

  export type rolCreateOrConnectWithoutUssers_rolInput = {
    where: rolWhereUniqueInput
    create: XOR<rolCreateWithoutUssers_rolInput, rolUncheckedCreateWithoutUssers_rolInput>
  }

  export type usuariosCreateWithoutUssers_rolInput = {
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    autentication?: autenticationCreateNestedManyWithoutUsuariosInput
    historic_usuario?: historic_usuarioCreateNestedManyWithoutUsuariosInput
    log_connection?: log_connectionCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutUssers_rolInput = {
    ID_USUARIOS?: number
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    autentication?: autenticationUncheckedCreateNestedManyWithoutUsuariosInput
    historic_usuario?: historic_usuarioUncheckedCreateNestedManyWithoutUsuariosInput
    log_connection?: log_connectionUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutUssers_rolInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutUssers_rolInput, usuariosUncheckedCreateWithoutUssers_rolInput>
  }

  export type rolUpsertWithoutUssers_rolInput = {
    update: XOR<rolUpdateWithoutUssers_rolInput, rolUncheckedUpdateWithoutUssers_rolInput>
    create: XOR<rolCreateWithoutUssers_rolInput, rolUncheckedCreateWithoutUssers_rolInput>
  }

  export type rolUpdateWithoutUssers_rolInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    DESCRIPTION?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rolUncheckedUpdateWithoutUssers_rolInput = {
    ID_ROL?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    DESCRIPTION?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usuariosUpsertWithoutUssers_rolInput = {
    update: XOR<usuariosUpdateWithoutUssers_rolInput, usuariosUncheckedUpdateWithoutUssers_rolInput>
    create: XOR<usuariosCreateWithoutUssers_rolInput, usuariosUncheckedCreateWithoutUssers_rolInput>
  }

  export type usuariosUpdateWithoutUssers_rolInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    autentication?: autenticationUpdateManyWithoutUsuariosNestedInput
    historic_usuario?: historic_usuarioUpdateManyWithoutUsuariosNestedInput
    log_connection?: log_connectionUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutUssers_rolInput = {
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    autentication?: autenticationUncheckedUpdateManyWithoutUsuariosNestedInput
    historic_usuario?: historic_usuarioUncheckedUpdateManyWithoutUsuariosNestedInput
    log_connection?: log_connectionUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosCreateWithoutLog_connectionInput = {
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    autentication?: autenticationCreateNestedManyWithoutUsuariosInput
    historic_usuario?: historic_usuarioCreateNestedManyWithoutUsuariosInput
    ussers_rol?: ussers_rolCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutLog_connectionInput = {
    ID_USUARIOS?: number
    NAME: string
    LAST_NAME: string
    EMAIL: string
    TYPE_DOCUMENT: string
    DOCUMENT: string
    STATE: string
    CREATION_DATE: Date | string
    autentication?: autenticationUncheckedCreateNestedManyWithoutUsuariosInput
    historic_usuario?: historic_usuarioUncheckedCreateNestedManyWithoutUsuariosInput
    ussers_rol?: ussers_rolUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutLog_connectionInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutLog_connectionInput, usuariosUncheckedCreateWithoutLog_connectionInput>
  }

  export type usuariosUpsertWithoutLog_connectionInput = {
    update: XOR<usuariosUpdateWithoutLog_connectionInput, usuariosUncheckedUpdateWithoutLog_connectionInput>
    create: XOR<usuariosCreateWithoutLog_connectionInput, usuariosUncheckedCreateWithoutLog_connectionInput>
  }

  export type usuariosUpdateWithoutLog_connectionInput = {
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    autentication?: autenticationUpdateManyWithoutUsuariosNestedInput
    historic_usuario?: historic_usuarioUpdateManyWithoutUsuariosNestedInput
    ussers_rol?: ussers_rolUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutLog_connectionInput = {
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
    NAME?: StringFieldUpdateOperationsInput | string
    LAST_NAME?: StringFieldUpdateOperationsInput | string
    EMAIL?: StringFieldUpdateOperationsInput | string
    TYPE_DOCUMENT?: StringFieldUpdateOperationsInput | string
    DOCUMENT?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    autentication?: autenticationUncheckedUpdateManyWithoutUsuariosNestedInput
    historic_usuario?: historic_usuarioUncheckedUpdateManyWithoutUsuariosNestedInput
    ussers_rol?: ussers_rolUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type autenticationCreateWithoutUsuariosInput = {
    CREDENTIAL: string
    HASH: string
    STATE: string
  }

  export type autenticationUncheckedCreateWithoutUsuariosInput = {
    ID_AUTH?: number
    CREDENTIAL: string
    HASH: string
    STATE: string
  }

  export type autenticationCreateOrConnectWithoutUsuariosInput = {
    where: autenticationWhereUniqueInput
    create: XOR<autenticationCreateWithoutUsuariosInput, autenticationUncheckedCreateWithoutUsuariosInput>
  }

  export type autenticationCreateManyUsuariosInputEnvelope = {
    data: Enumerable<autenticationCreateManyUsuariosInput>
    skipDuplicates?: boolean
  }

  export type historic_usuarioCreateWithoutUsuariosInput = {
    PREV_DATA: string
    CURRENT_DATA: string
    DATE: Date | string
    IP: string
  }

  export type historic_usuarioUncheckedCreateWithoutUsuariosInput = {
    ID_HISTORIC_USSERS?: number
    PREV_DATA: string
    CURRENT_DATA: string
    DATE: Date | string
    IP: string
  }

  export type historic_usuarioCreateOrConnectWithoutUsuariosInput = {
    where: historic_usuarioWhereUniqueInput
    create: XOR<historic_usuarioCreateWithoutUsuariosInput, historic_usuarioUncheckedCreateWithoutUsuariosInput>
  }

  export type historic_usuarioCreateManyUsuariosInputEnvelope = {
    data: Enumerable<historic_usuarioCreateManyUsuariosInput>
    skipDuplicates?: boolean
  }

  export type ussers_rolCreateWithoutUsuariosInput = {
    CREATION_DATE: Date | string
    STATE: string
    rol: rolCreateNestedOneWithoutUssers_rolInput
  }

  export type ussers_rolUncheckedCreateWithoutUsuariosInput = {
    ID_USSERS_ROL?: number
    CREATION_DATE: Date | string
    STATE: string
    ID_ROL: number
  }

  export type ussers_rolCreateOrConnectWithoutUsuariosInput = {
    where: ussers_rolWhereUniqueInput
    create: XOR<ussers_rolCreateWithoutUsuariosInput, ussers_rolUncheckedCreateWithoutUsuariosInput>
  }

  export type ussers_rolCreateManyUsuariosInputEnvelope = {
    data: Enumerable<ussers_rolCreateManyUsuariosInput>
    skipDuplicates?: boolean
  }

  export type log_connectionCreateWithoutUsuariosInput = {
    INITIAL_DATE: Date | string
    FINAL_DATE: Date | string
    STATE: string
  }

  export type log_connectionUncheckedCreateWithoutUsuariosInput = {
    ID_USSERS_ROL?: number
    INITIAL_DATE: Date | string
    FINAL_DATE: Date | string
    STATE: string
  }

  export type log_connectionCreateOrConnectWithoutUsuariosInput = {
    where: log_connectionWhereUniqueInput
    create: XOR<log_connectionCreateWithoutUsuariosInput, log_connectionUncheckedCreateWithoutUsuariosInput>
  }

  export type log_connectionCreateManyUsuariosInputEnvelope = {
    data: Enumerable<log_connectionCreateManyUsuariosInput>
    skipDuplicates?: boolean
  }

  export type autenticationUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: autenticationWhereUniqueInput
    update: XOR<autenticationUpdateWithoutUsuariosInput, autenticationUncheckedUpdateWithoutUsuariosInput>
    create: XOR<autenticationCreateWithoutUsuariosInput, autenticationUncheckedCreateWithoutUsuariosInput>
  }

  export type autenticationUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: autenticationWhereUniqueInput
    data: XOR<autenticationUpdateWithoutUsuariosInput, autenticationUncheckedUpdateWithoutUsuariosInput>
  }

  export type autenticationUpdateManyWithWhereWithoutUsuariosInput = {
    where: autenticationScalarWhereInput
    data: XOR<autenticationUpdateManyMutationInput, autenticationUncheckedUpdateManyWithoutAutenticationInput>
  }

  export type autenticationScalarWhereInput = {
    AND?: Enumerable<autenticationScalarWhereInput>
    OR?: Enumerable<autenticationScalarWhereInput>
    NOT?: Enumerable<autenticationScalarWhereInput>
    ID_AUTH?: IntFilter | number
    ID_USUARIO?: IntFilter | number
    CREDENTIAL?: StringFilter | string
    HASH?: StringFilter | string
    STATE?: StringFilter | string
  }

  export type historic_usuarioUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: historic_usuarioWhereUniqueInput
    update: XOR<historic_usuarioUpdateWithoutUsuariosInput, historic_usuarioUncheckedUpdateWithoutUsuariosInput>
    create: XOR<historic_usuarioCreateWithoutUsuariosInput, historic_usuarioUncheckedCreateWithoutUsuariosInput>
  }

  export type historic_usuarioUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: historic_usuarioWhereUniqueInput
    data: XOR<historic_usuarioUpdateWithoutUsuariosInput, historic_usuarioUncheckedUpdateWithoutUsuariosInput>
  }

  export type historic_usuarioUpdateManyWithWhereWithoutUsuariosInput = {
    where: historic_usuarioScalarWhereInput
    data: XOR<historic_usuarioUpdateManyMutationInput, historic_usuarioUncheckedUpdateManyWithoutHistoric_usuarioInput>
  }

  export type historic_usuarioScalarWhereInput = {
    AND?: Enumerable<historic_usuarioScalarWhereInput>
    OR?: Enumerable<historic_usuarioScalarWhereInput>
    NOT?: Enumerable<historic_usuarioScalarWhereInput>
    ID_HISTORIC_USSERS?: IntFilter | number
    ID_USUARIOS?: IntFilter | number
    PREV_DATA?: StringFilter | string
    CURRENT_DATA?: StringFilter | string
    DATE?: DateTimeFilter | Date | string
    IP?: StringFilter | string
  }

  export type ussers_rolUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: ussers_rolWhereUniqueInput
    update: XOR<ussers_rolUpdateWithoutUsuariosInput, ussers_rolUncheckedUpdateWithoutUsuariosInput>
    create: XOR<ussers_rolCreateWithoutUsuariosInput, ussers_rolUncheckedCreateWithoutUsuariosInput>
  }

  export type ussers_rolUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: ussers_rolWhereUniqueInput
    data: XOR<ussers_rolUpdateWithoutUsuariosInput, ussers_rolUncheckedUpdateWithoutUsuariosInput>
  }

  export type ussers_rolUpdateManyWithWhereWithoutUsuariosInput = {
    where: ussers_rolScalarWhereInput
    data: XOR<ussers_rolUpdateManyMutationInput, ussers_rolUncheckedUpdateManyWithoutUssers_rolInput>
  }

  export type log_connectionUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: log_connectionWhereUniqueInput
    update: XOR<log_connectionUpdateWithoutUsuariosInput, log_connectionUncheckedUpdateWithoutUsuariosInput>
    create: XOR<log_connectionCreateWithoutUsuariosInput, log_connectionUncheckedCreateWithoutUsuariosInput>
  }

  export type log_connectionUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: log_connectionWhereUniqueInput
    data: XOR<log_connectionUpdateWithoutUsuariosInput, log_connectionUncheckedUpdateWithoutUsuariosInput>
  }

  export type log_connectionUpdateManyWithWhereWithoutUsuariosInput = {
    where: log_connectionScalarWhereInput
    data: XOR<log_connectionUpdateManyMutationInput, log_connectionUncheckedUpdateManyWithoutLog_connectionInput>
  }

  export type log_connectionScalarWhereInput = {
    AND?: Enumerable<log_connectionScalarWhereInput>
    OR?: Enumerable<log_connectionScalarWhereInput>
    NOT?: Enumerable<log_connectionScalarWhereInput>
    ID_USSERS_ROL?: IntFilter | number
    INITIAL_DATE?: DateTimeFilter | Date | string
    FINAL_DATE?: DateTimeFilter | Date | string
    STATE?: StringFilter | string
    ID_USUARIOS?: IntFilter | number
  }

  export type ussers_rolCreateManyRolInput = {
    ID_USSERS_ROL?: number
    CREATION_DATE: Date | string
    STATE: string
    ID_USUARIOS: number
  }

  export type ussers_rolUpdateWithoutRolInput = {
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    usuarios?: usuariosUpdateOneRequiredWithoutUssers_rolNestedInput
  }

  export type ussers_rolUncheckedUpdateWithoutRolInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
  }

  export type ussers_rolUncheckedUpdateManyWithoutUssers_rolInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    ID_USUARIOS?: IntFieldUpdateOperationsInput | number
  }

  export type autenticationCreateManyUsuariosInput = {
    ID_AUTH?: number
    CREDENTIAL: string
    HASH: string
    STATE: string
  }

  export type historic_usuarioCreateManyUsuariosInput = {
    ID_HISTORIC_USSERS?: number
    PREV_DATA: string
    CURRENT_DATA: string
    DATE: Date | string
    IP: string
  }

  export type ussers_rolCreateManyUsuariosInput = {
    ID_USSERS_ROL?: number
    CREATION_DATE: Date | string
    STATE: string
    ID_ROL: number
  }

  export type log_connectionCreateManyUsuariosInput = {
    ID_USSERS_ROL?: number
    INITIAL_DATE: Date | string
    FINAL_DATE: Date | string
    STATE: string
  }

  export type autenticationUpdateWithoutUsuariosInput = {
    CREDENTIAL?: StringFieldUpdateOperationsInput | string
    HASH?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type autenticationUncheckedUpdateWithoutUsuariosInput = {
    ID_AUTH?: IntFieldUpdateOperationsInput | number
    CREDENTIAL?: StringFieldUpdateOperationsInput | string
    HASH?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type autenticationUncheckedUpdateManyWithoutAutenticationInput = {
    ID_AUTH?: IntFieldUpdateOperationsInput | number
    CREDENTIAL?: StringFieldUpdateOperationsInput | string
    HASH?: StringFieldUpdateOperationsInput | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type historic_usuarioUpdateWithoutUsuariosInput = {
    PREV_DATA?: StringFieldUpdateOperationsInput | string
    CURRENT_DATA?: StringFieldUpdateOperationsInput | string
    DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    IP?: StringFieldUpdateOperationsInput | string
  }

  export type historic_usuarioUncheckedUpdateWithoutUsuariosInput = {
    ID_HISTORIC_USSERS?: IntFieldUpdateOperationsInput | number
    PREV_DATA?: StringFieldUpdateOperationsInput | string
    CURRENT_DATA?: StringFieldUpdateOperationsInput | string
    DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    IP?: StringFieldUpdateOperationsInput | string
  }

  export type historic_usuarioUncheckedUpdateManyWithoutHistoric_usuarioInput = {
    ID_HISTORIC_USSERS?: IntFieldUpdateOperationsInput | number
    PREV_DATA?: StringFieldUpdateOperationsInput | string
    CURRENT_DATA?: StringFieldUpdateOperationsInput | string
    DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    IP?: StringFieldUpdateOperationsInput | string
  }

  export type ussers_rolUpdateWithoutUsuariosInput = {
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    rol?: rolUpdateOneRequiredWithoutUssers_rolNestedInput
  }

  export type ussers_rolUncheckedUpdateWithoutUsuariosInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    CREATION_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
    ID_ROL?: IntFieldUpdateOperationsInput | number
  }

  export type log_connectionUpdateWithoutUsuariosInput = {
    INITIAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    FINAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type log_connectionUncheckedUpdateWithoutUsuariosInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    INITIAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    FINAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
  }

  export type log_connectionUncheckedUpdateManyWithoutLog_connectionInput = {
    ID_USSERS_ROL?: IntFieldUpdateOperationsInput | number
    INITIAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    FINAL_DATE?: DateTimeFieldUpdateOperationsInput | Date | string
    STATE?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}