
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.5.0
 * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
 */
Prisma.prismaVersion = {
  client: "4.5.0",
  engine: "0362da9eebca54d94c8ef5edd3b2e90af99ba452"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AutenticationScalarFieldEnum = makeEnum({
  ID_AUTH: 'ID_AUTH',
  ID_USUARIO: 'ID_USUARIO',
  CREDENTIAL: 'CREDENTIAL',
  HASH: 'HASH',
  STATE: 'STATE'
});

exports.Prisma.Historic_usuarioScalarFieldEnum = makeEnum({
  ID_HISTORIC_USSERS: 'ID_HISTORIC_USSERS',
  ID_USUARIOS: 'ID_USUARIOS',
  PREV_DATA: 'PREV_DATA',
  CURRENT_DATA: 'CURRENT_DATA',
  DATE: 'DATE',
  IP: 'IP'
});

exports.Prisma.Log_connectionScalarFieldEnum = makeEnum({
  ID_USSERS_ROL: 'ID_USSERS_ROL',
  INITIAL_DATE: 'INITIAL_DATE',
  FINAL_DATE: 'FINAL_DATE',
  STATE: 'STATE',
  ID_USUARIOS: 'ID_USUARIOS'
});

exports.Prisma.RolScalarFieldEnum = makeEnum({
  ID_ROL: 'ID_ROL',
  NAME: 'NAME',
  DESCRIPTION: 'DESCRIPTION',
  STATE: 'STATE',
  CREATION_DATE: 'CREATION_DATE'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Ussers_rolScalarFieldEnum = makeEnum({
  ID_USSERS_ROL: 'ID_USSERS_ROL',
  CREATION_DATE: 'CREATION_DATE',
  STATE: 'STATE',
  ID_USUARIOS: 'ID_USUARIOS',
  ID_ROL: 'ID_ROL'
});

exports.Prisma.UsuariosScalarFieldEnum = makeEnum({
  ID_USUARIOS: 'ID_USUARIOS',
  NAME: 'NAME',
  LAST_NAME: 'LAST_NAME',
  EMAIL: 'EMAIL',
  TYPE_DOCUMENT: 'TYPE_DOCUMENT',
  DOCUMENT: 'DOCUMENT',
  STATE: 'STATE',
  CREATION_DATE: 'CREATION_DATE'
});


exports.Prisma.ModelName = makeEnum({
  autentication: 'autentication',
  historic_usuario: 'historic_usuario',
  rol: 'rol',
  ussers_rol: 'ussers_rol',
  log_connection: 'log_connection',
  usuarios: 'usuarios'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
